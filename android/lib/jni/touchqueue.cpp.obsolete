#include "touchqueue.h"
#include <stdlib.h>
#include <memory.h>

TouchQueueElement::TouchQueueElement(int level, int capacity, int type, int size, int* id, int* x, int* y, int actionIndex) :
	level(level),
	capacity(capacity),
	id(new int[capacity]),
	x(new int[capacity]),
	y(new int[capacity])
{
	copy(type, size, id, x, y, actionIndex);
}

TouchQueueElement::~TouchQueueElement()
{
	delete [] id;
	delete [] x;
	delete [] y;
}

void TouchQueueElement::copy(int type, int size, int* id, int* x, int* y, int actionIndex)
{
	this->type = type;
	this->size = size;
	memcpy(&this->id[0], id, size * sizeof(int));
	memcpy(&this->x[0], x, size * sizeof(int));
	memcpy(&this->y[0], y, size * sizeof(int));
	this->actionIndex = actionIndex;
}

static unsigned int nextpow2(unsigned int v)
{
	v--;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	v++;

	return v;
}

static unsigned int mylog2(unsigned int v)
{
	unsigned int r = 0;

	while (v >>= 1)
		r++;

	return r;
}


void TouchQueue::push(int type, int size, int* id, int* x, int* y, int actionIndex)
{
	int capacity = nextpow2(size);
	int level = mylog2(capacity);

	if (cache[level].empty())
	{
		queue.push_back(new TouchQueueElement(level, capacity, type, size, id, x, y, actionIndex));
	}
	else
	{
		TouchQueueElement* element = cache[level].back();
		cache[level].pop_back();
		element->copy(type, size, id, x, y, actionIndex);
		queue.push_back(element);
	}
}

TouchQueue::~TouchQueue()
{
	for (size_t i = 0; i < queue.size(); ++i)
		delete queue[i];
	queue.clear();

	for (int j = 0; j < 9; ++j)
	{
		for (size_t i = 0; i < cache[j].size(); ++i)
			delete cache[j][i];
		cache[j].clear();
	}
}

TouchQueueElement* TouchQueue::front() const
{
	return queue.front();
}

void TouchQueue::pop()
{
	TouchQueueElement* element = queue.front();
	queue.pop_front();
	cache[element->level].push_back(element);
}

bool TouchQueue::empty() const
{
	return queue.empty();
}
