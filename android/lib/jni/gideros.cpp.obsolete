#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <deque>

#include <GLES/gl.h>

#include <jni.h>
#include <android/log.h>
#include <sys/stat.h>

#include <platform.h>
#include <application.h>
#include <luaapplication.h>
#include <libnetwork.h>
#include <binder.h>
#include <ghttp.h>
#include <bytebuffer.h>
#include <soundimplementation.h>
#include <soundsystemopenal.h>
#include <sounddecoderwav.h>
//#include <soundsystemmpg123.h>
//#include <sounddecoderstreamer.h>
#include <sounddecodermediaplayer.h>

#include "touchmanager-android.h"
#include "touchqueue.h"
#include <javanativebridge.h>

#include <event.h>

#include <pystring.h>

#include <gfile.h>
#include <gfile_p.h>
#include <gstdio.h>

#include <splashscreen.h>
#include <application.h>
#include <stage.h>

#include <keycode.h>

#include <gvfs-android.h>

static SplashScreen* splashScreen_ = NULL;

static volatile const char* licenseKey_ = "9852564f4728e0c11e34ca3eb5fe20b2";
//-----------------------------------------01234567890123456------------------

void drawInfo();
void refreshLocalIPs();
void g_setFps(int);
void g_exit();

/*
extern "C"
{
    void *__dso_handle = NULL;
}
*/

static bool init_ = true;
static std::string externalDir_, internalDir_, cacheDir_;

static SoundImplementation* soundImplementation_ = NULL;
static LuaApplication* application_ = NULL;
static TouchManager* touchManager_ = NULL;
static TouchQueue* touchQueue_ = NULL;
static std::deque<std::pair<int, int> >* keyQueue_ = NULL;

static bool player_;
static int width_, height_;

static Server* g_server = NULL;

static std::string resourceDirectory_;

static bool running_ = false;

static std::string md5filename_;
static std::map<std::string, std::vector<unsigned char> > md5_;
static void loadMD5()
{
	md5_.clear();

	FILE* fis = fopen(md5filename_.c_str(), "rb");

	if (fis == NULL)
		return;

	int nfiles;
	fread(&nfiles, sizeof(int), 1, fis);

	for (int i = 0; i < nfiles; ++i)
	{
		int strlen;
		fread(&strlen, sizeof(int), 1, fis);

		char* buffer = (char*)malloc(strlen);
		fread(buffer, 1, strlen, fis);
		std::string filename(buffer, strlen);
		free(buffer);

		std::vector<unsigned char> md5(16);
		fread(&md5[0], 1, 16, fis);

		md5_[filename] = md5;
	}
}
void saveMD5()
{
	FILE* fos = fopen(md5filename_.c_str(), "wb");
	if (fos == NULL)
		return;

	int nfiles = md5_.size();
	fwrite(&nfiles, sizeof(int), 1, fos);

	int i = 0;
	std::map<std::string, std::vector<unsigned char> >::iterator iter, end = md5_.end();
	for (iter = md5_.begin(); iter != end; ++iter, ++i)
	{
		int strlen = iter->first.size();
		fwrite(&strlen, sizeof(int), 1, fos);
		fwrite(iter->first.c_str(), 1, strlen, fos);
		fwrite(&iter->second[0], 1, 16, fos);
	}

	fclose(fos);
}
static void calculateMD5(const char* file)
{
	std::vector<unsigned char> md5(16);
	if (md5_fromfile(g_pathForFile(file), &md5[0]))
		md5_[file] = md5;
}

static void drawIPs()
{
	if (player_ == true && running_ == false)
	{	
		drawInfo();
	}
}


static void printToServer(const char* str, void* data)
{
	if (g_server == NULL)
		return;

	unsigned int size = 1 + strlen(str) + 1;
	char* buffer = (char*)malloc(size);

	int pos = 0;
	buffer[pos] = 4;
	pos += 1;
	strcpy(buffer + pos, str);
	pos += strlen(str) + 1;

	g_server->sendData(buffer, size);

	free(buffer);
}

static void setProjectName(const char* projectName)
{
	printf("setProjectName: %s\n", projectName);

	std::string dir = externalDir_;

	if (dir[dir.size() - 1] != '/')
		dir += "/";

	dir += "gideros";

	mkdir(dir.c_str(), 0755);

	dir += "/";

	dir += projectName;

	mkdir(dir.c_str(), 0755);

	dir += "/";

	md5filename_ = dir + "md5.txt";
	loadMD5();

	std::string documents = dir + "documents";
	std::string temporary = dir + "temporary";
	std::string resource = dir + "resource";

	printf("documents: %s\n", documents.c_str());
	printf("temporary: %s\n", temporary.c_str());
	printf("resource: %s\n", resource.c_str());

	printf("mkdir: %d\n", mkdir(documents.c_str(), 0755));
	printf("mkdir: %d\n", mkdir(temporary.c_str(), 0755));
	printf("mkdir: %d\n", mkdir(resource.c_str(), 0755));

	setDocumentsDirectory(documents.c_str());
	setTemporaryDirectory(temporary.c_str());
	setResourceDirectory(resource.c_str());

	resourceDirectory_ = resource;
}

static void sendFileList()
{
	Server* server_ = g_server;

	ByteBuffer buffer;

	// type(byte) 6
	// D or F, file (zero ended string), age (int)
	// D or F, file (zero ended string), age (int)
	// ....

	buffer.append((char)6);

	std::vector<std::string> files, directories;
	getDirectoryListingR(resourceDirectory_.c_str(), &files, &directories);

	for (std::size_t i = 0; i < files.size(); ++i)
	{
		buffer.append('F');
		buffer.append(files[i]);
		int age = fileAge(pathForFileEx(resourceDirectory_.c_str(), files[i].c_str()));
		buffer.append(age);

		std::map<std::string, std::vector<unsigned char> >::iterator iter = md5_.find(files[i]);
		if (iter == md5_.end())
		{
			calculateMD5(files[i].c_str());
			saveMD5();
			iter = md5_.find(files[i]);
		}
		buffer.append(&iter->second[0], 16);
	}

	for (std::size_t i = 0; i < directories.size(); ++i)
	{
		buffer.append('D');
		buffer.append(directories[i]);
	}

	server_->sendData(buffer.data(), buffer.size());
}

static void luaError(const char* error)
{
	debuglog("%s", error);

	if (player_ == true)
	{
		running_ = false;

		printToServer(error, NULL);
		printToServer("\n", NULL);
		application_->deinitialize();
		application_->initialize();	
	}
	else
	{
		g_exit();
	}
}

static void loadLuaFiles()
{
	{
		G_FILE* fis = g_fopen("luafiles.txt", "rt");

		if (fis)
		{
			while (true)
			{
				char line[256] = "";
				g_fgets(line, 255, fis);

				char* c;
				if ((c = strrchr(line, '\r')))
					*c = '\0';
				if ((c = strrchr(line, '\n')))
					*c = '\0';

				if (line[0] == '\0')
					break;

				debuglog("*%s*", line);

				try
				{
					application_->loadFile(line);
				}
				catch (LuaException e)
				{
					luaError(e.what());
				}
			}

			g_fclose(fis);
		}
	}

	Event event(Event::APPLICATION_START);
	application_->broadcastEvent(&event);
}

static void setResolution(int width, int height)
{
	if (width > height)
	{
		std::swap(width, height);
		application_->setHardwareOrientation(eLandscapeLeft);
	}
	
	width_ = width;
	height_ = height;
	application_->setResolution(width_, height_);
}

static void initialize(JNIEnv* env, int width, int height)
{
	JavaVM* vm;
	env->GetJavaVM(&vm);

	ghttp_init();

	soundImplementation_ = new SoundImplementation;
	soundImplementation_->addSoundSystem<SoundSystemOpenAL>();
//	soundImplementation_->addSoundSystem<SoundSystemMpg123>();

	setSoundInterface(soundImplementation_);

	initializeSound();

	SoundDecoder* wav = soundImplementation_->addSoundDecoder<SoundDecoderWav>(1);
	soundImplementation_->addExtension("wav", wav);
//	SoundDecoder* mp3 = soundImplementation_->addSoundDecoder<SoundDecoderStreamer>(0x80000000);
//	soundImplementation_->addExtension("mp3", mp3);

	SoundDecoder* mp3 = soundImplementation_->addSoundDecoder<SoundDecoderMediaPlayer>(0x80000000, vm);
	soundImplementation_->addExtension("mp3", mp3);

	touchManager_ = new TouchManager;
	touchQueue_ = new TouchQueue;
	keyQueue_ = new std::deque<std::pair<int, int> >;

	if (player_)
		g_server = new Server(15000);
	else
		g_server = NULL;

	application_ = new LuaApplication;
	application_->setPrintFunc(printToServer);
	application_->enableExceptions();
	application_->initialize();
	setResolution(width, height);

	Binder::disableTypeChecking();

	if (player_ == false)
	{
		setDocumentsDirectory(internalDir_.c_str());
		setTemporaryDirectory(cacheDir_.c_str());

		// load properties.bin
		{
			G_FILE* fis = g_fopen("properties.bin", "rb");

			if (fis)
			{
				g_fseek(fis, 0, SEEK_END);
				int len = g_ftell(fis);
				g_fseek(fis, 0, SEEK_SET);

				std::vector<char> buf(len);
				g_fread(&buf[0], 1, len, fis);
				g_fclose(fis);

				ByteBuffer buffer(&buf[0], buf.size());

				int scaleMode, logicalWidth, logicalHeight;
				buffer >> scaleMode;
				buffer >> logicalWidth;
				buffer >> logicalHeight;

				application_->setLogicalDimensions(logicalWidth, logicalHeight);
				application_->setLogicalScaleMode((LogicalScaleMode)scaleMode);

				int scaleCount;
				buffer >> scaleCount;
				std::vector<std::pair<std::string, float> > imageScales(scaleCount);
				for (int i = 0; i < scaleCount; ++i)
				{
					buffer >> imageScales[i].first;
					buffer >> imageScales[i].second;
				}

				application_->setImageScales(imageScales);

				int orientation;
				buffer >> orientation;
				application_->setOrientation((Orientation)orientation);

				int fps;
				buffer >> fps;
				g_setFps(fps);

				int retinaDisplay;
				buffer >> retinaDisplay;
			}
		}

		bool licensed = (licenseKey_[15] == 'f' && licenseKey_[16] == 'f');

		// load lua files
		if (licensed)
		{
			loadLuaFiles();
		}
		else
		{
			application_->getApplication()->setBackgroundColor(0, 0, 0);
			splashScreen_ = new SplashScreen(application_->getApplication());
			application_->getApplication()->stage()->addChild(splashScreen_);
			splashScreen_->unref();
		}

	}	// if (player == false)
}


static void deinitialize()
{
	if (running_ == true)
	{
		try
		{
			Event event(Event::APPLICATION_EXIT);
			application_->broadcastEvent(&event);
		}
		catch(LuaException e)
		{
			debuglog(e.what());
			printToServer(e.what(), NULL);
			printToServer("\n", NULL);
		}
	}

	if (g_server)
	{
		NetworkEvent event;
		g_server->tick(&event);
	}

	running_ = false;

	// most probably we deinitialize without a opengl context
	// if so, glDeleteTextures gives error
	// and this is not very important becuase after this call, our opengl context will be destroyed
	application_->deinitialize();
	delete application_;
	application_ = NULL;

	deinitializeSound();
	setSoundInterface(NULL);
	delete soundImplementation_;
	soundImplementation_ = NULL;

	delete touchManager_;
	touchManager_ = NULL;

	delete touchQueue_;
	touchQueue_ = NULL;
	
	delete keyQueue_;
	keyQueue_ = NULL;

	ghttp_cleanup();

	delete g_server;
	g_server = NULL;
}

extern "C"
{

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeCreate(JNIEnv* env, jclass cls, jstring jfiles)
{
	debuglog("nativeCreate");

	JavaVM* javaVM = NULL;
	env->GetJavaVM(&javaVM);
	jnb_setJavaVM(javaVM);

	if (jfiles)
	{
		jboolean isCopy;
		const char* files = env->GetStringUTFChars(jfiles, &isCopy);

		std::vector<std::string> result;
		pystring::split(files, result, "|");

		if (!result.empty())
		{
			gvfs_setApkFile(result[0].c_str());

			for (size_t i = 1; i < result.size(); i += 3)
			{
				gvfs_addFile(result[i].c_str(), atoi(result[i + 1].c_str()), atoi(result[i + 2].c_str()));
				debuglog("%s %d %d", result[i].c_str(), atoi(result[i + 1].c_str()), atoi(result[i + 2].c_str()));
			}
		}

		env->ReleaseStringUTFChars(jfiles, files);

		player_ = false;
	}
	else
		player_ = true;
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeInit(
	JNIEnv* env,
	jclass cls,
	jstring externalDir, jstring internalDir, jstring cacheDir)
{
	debuglog("nativeInit");

	jboolean isCopy;

    const char* szExternalDir = env->GetStringUTFChars(externalDir, &isCopy);
    externalDir_ = szExternalDir;
    env->ReleaseStringUTFChars(externalDir, szExternalDir);

    const char* szInternalDir = env->GetStringUTFChars(internalDir, &isCopy);
    internalDir_ = szInternalDir;
    env->ReleaseStringUTFChars(internalDir, szInternalDir);

    const char* szCacheDir = env->GetStringUTFChars(cacheDir, &isCopy);
    cacheDir_ = szCacheDir;
    env->ReleaseStringUTFChars(cacheDir, szCacheDir);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeResize(JNIEnv* env, jobject thiz, jint width, jint height)
{
	refreshLocalIPs();

	debuglog("nativeResize 1 [%d %d]", width, height);

	if (init_ == false)
	{
		setResolution(width, height);
		return;
	}

	debuglog("nativeResize 2 [%d %d]", width, height);

	init_ = false;

	initialize(env, width, height);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeProcessTouches(JNIEnv* env, jclass cls)
{
	try
	{
		while (!keyQueue_->empty())
		{
			std::pair<int, int> element = keyQueue_->front();
			keyQueue_->pop_front();
			
			switch (element.first)
			{
				case 0:
					application_->getApplication()->keyDown(element.second);
					break;
				case 1:
					application_->getApplication()->keyUp(element.second);
					break;
			}
		}
	}
	catch (LuaException e)
	{
		luaError(e.what());
	}	

	try
	{
		while (!touchQueue_->empty())
		{
			TouchQueueElement* element = touchQueue_->front();
			touchQueue_->pop();

			static std::vector<Touch*> touches;
			static std::vector<Touch*> allTouches;

			switch (element->type)
			{
			case 0:
				touchManager_->touchesBegin(element->size, element->id, element->x, element->y, element->actionIndex, &touches, &allTouches);
				application_->touchesBegan(touches, allTouches);
				break;
			case 1:
				touchManager_->touchesMove(element->size, element->id, element->x, element->y, &touches, &allTouches);
				application_->touchesMoved(touches, allTouches);
				break;
			case 2:
				touchManager_->touchesEnd(element->size, element->id, element->x, element->y, element->actionIndex, &touches, &allTouches);
				application_->touchesEnded(touches, allTouches);
				break;
			case 3:
				touchManager_->touchesCancel(element->size, element->id, element->x, element->y, &touches, &allTouches);
				application_->touchesCancelled(touches, allTouches);
				break;
			}
		}
	}
	catch (LuaException e)
	{
		luaError(e.what());
	}
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeRender(JNIEnv* env)
{
//	glClearColor(0, 0, 1, 1);
//	glClear(GL_COLOR_BUFFER_BIT);

	if (g_server != NULL)
	{
		Server* server_ = g_server;

		int dataTotal = 0;

		while (true)
		{
			int dataSent0 = server_->dataSent();
			int dataReceived0 = server_->dataReceived();

			NetworkEvent event;
			server_->tick(&event);

			//		if (event.eventCode != eNone)
			//			printf("%s\n", eventCodeString(event.eventCode));

			int dataSent1 = server_->dataSent();
			int dataReceived1 = server_->dataReceived();

			if (event.eventCode == eDataReceived)
			{
				const std::vector<char>& data = event.data;

				switch (data[0])
				{
					case 0:			// create folder
					{
						std::string folderName = &data[1];
						mkdir(g_pathForFile(folderName.c_str()), 0755);
						break;
					}

					case 1:			// create file
					{
						std::string fileName = &data[1];
						const char* absfilename = g_pathForFile(fileName.c_str());
						printf("%s\n", absfilename);
						FILE* fos = fopen(absfilename, "wb");
						int pos = 1 + fileName.size() + 1;
						if (data.size() > pos)
							fwrite(&data[pos], data.size() - pos, 1, fos);
						fclose(fos);
						calculateMD5(fileName.c_str());
						saveMD5();
						break;
					}
					case 2:
					{
						printf("play message is received\n");

						running_ = true;

						std::vector<std::string> luafiles;

						ByteBuffer buffer(&data[0], data.size());

						char chr;
						buffer >> chr;

						while (buffer.eob() == false)
						{
							std::string str;
							buffer >> str;
							luafiles.push_back(str);
						}


						try
						{
							for (std::size_t i = 0; i < luafiles.size(); ++i)
								application_->loadFile(luafiles[i].c_str());

							Event event(Event::APPLICATION_START);
							application_->broadcastEvent(&event);
						}
						catch (LuaException e)
						{
							luaError(e.what());
						}

						break;
					}
					case 3:
					{
						printf("stop message is received\n");

						if (running_ == true)
						{
							try
							{
								Event event(Event::APPLICATION_EXIT);
								application_->broadcastEvent(&event);
							}
							catch (LuaException e)
							{
								printf("%s\n", e.what());
								printToServer(e.what(), NULL);
								printToServer("\n", NULL);
							}
						}

						running_ = false;

						application_->deinitialize();
						application_->initialize();
						application_->setResolution(width_, height_);
						break;
					}
					case 5:
					{
						//	deleteFiles();
						break;
					}
					case 7:
					{
						sendFileList();
						break;
					}
					case 8:
					{
						// set project name
						ByteBuffer buffer(&data[0], data.size());

						char chr;
						buffer >> chr;

						std::string str;
						buffer >> str;

						setProjectName(str.c_str());
						break;
					}
					case 9:
					{
						// delete file
						ByteBuffer buffer(&data[0], data.size());

						char chr;
						buffer >> chr;

						std::string fileName;
						buffer >> fileName;

						remove(g_pathForFile(fileName.c_str()));

						{
							std::map<std::string, std::vector<unsigned char> >::iterator iter = md5_.find(fileName);
							if (iter != md5_.end())
							{
								md5_.erase(iter);
								saveMD5();
							}
						}

						break;
					}
					case 11:
					{
						ByteBuffer buffer(&data[0], data.size());

						char chr;
						buffer >> chr;

						int scaleMode, logicalWidth, logicalHeight;
						buffer >> scaleMode;
						buffer >> logicalWidth;
						buffer >> logicalHeight;

						application_->deinitialize();
						application_->initialize();
//						application_->setHardwareOrientation(orientation_);
//						application_->orientationChange(orientation_);
						application_->setResolution(width_, height_);
						application_->setLogicalDimensions(logicalWidth, logicalHeight);
						application_->setLogicalScaleMode((LogicalScaleMode)scaleMode);

						int scaleCount;
						buffer >> scaleCount;
						std::vector<std::pair<std::string, float> > imageScales(scaleCount);
						for (int i = 0; i < scaleCount; ++i)
						{
							buffer >> imageScales[i].first;
							buffer >> imageScales[i].second;
						}

						application_->setImageScales(imageScales);

						int orientation;
						buffer >> orientation;
						application_->setOrientation((Orientation)orientation);

						int fps;
						buffer >> fps;
						g_setFps(fps);

						int retinaDisplay;
						buffer >> retinaDisplay;

						break;
					}
				}
			}

			int dataDelta = (dataSent1 - dataSent0) + (dataReceived1 - dataReceived0);
			dataTotal += dataDelta;

			if (dataDelta == 0 || dataTotal > 1024)
				break;
		}

	}

	if (splashScreen_ && splashScreen_->isFinished())
	{
		application_->getApplication()->stage()->removeChild(splashScreen_);
		splashScreen_ = NULL;
		application_->getApplication()->setBackgroundColor(1, 1, 1);
		loadLuaFiles();
	}
		
	try
	{
		if (application_)
			application_->enterFrame();
	}
	catch (LuaException e)
	{
		luaError(e.what());
	}

	if (application_)
	{
		application_->clearBuffers();
		application_->renderScene(1);
		drawIPs();
	}
}

#if 0
static void log_touches(JNIEnv* env, const char* str, jint actionIndex, jint size, jintArray jid, jintArray jx, jintArray jy)
{
	if (actionIndex >= 0)
		debuglog("%s %d", str, actionIndex);
	else
		debuglog("%s", str);

	jint* id = env->GetIntArrayElements(jid, 0);
	jint* x = env->GetIntArrayElements(jx, 0);
	jint* y = env->GetIntArrayElements(jy, 0);

	for (int i = 0; i < size; ++i)
	{
		debuglog("(%d %d %d)", id[i], x[i], y[i]);
	}
	debuglog("\n");

	env->ReleaseIntArrayElements(jid, id, 0);
	env->ReleaseIntArrayElements(jx, x, 0);
	env->ReleaseIntArrayElements(jy, y, 0);
}
#endif

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeTouchesBegin(JNIEnv* env, jobject thiz, jint size, jintArray jid, jintArray jx, jintArray jy, jint actionIndex)
{
	jint* id = (jint*)env->GetPrimitiveArrayCritical(jid, 0);
	jint* x = (jint*)env->GetPrimitiveArrayCritical(jx, 0);
	jint* y = (jint*)env->GetPrimitiveArrayCritical(jy, 0);

	touchQueue_->push(0, size, id, x, y, actionIndex);

	env->ReleasePrimitiveArrayCritical(jid, id, 0);
	env->ReleasePrimitiveArrayCritical(jx, x, 0);
	env->ReleasePrimitiveArrayCritical(jy, y, 0);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeTouchesMove(JNIEnv* env, jobject thiz, jint size, jintArray jid, jintArray jx, jintArray jy)
{
	jint* id = (jint*)env->GetPrimitiveArrayCritical(jid, 0);
	jint* x = (jint*)env->GetPrimitiveArrayCritical(jx, 0);
	jint* y = (jint*)env->GetPrimitiveArrayCritical(jy, 0);

	touchQueue_->push(1, size, id, x, y, -1);

	env->ReleasePrimitiveArrayCritical(jid, id, 0);
	env->ReleasePrimitiveArrayCritical(jx, x, 0);
	env->ReleasePrimitiveArrayCritical(jy, y, 0);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeTouchesEnd(JNIEnv* env, jobject thiz, jint size, jintArray jid, jintArray jx, jintArray jy, jint actionIndex)
{
	jint* id = (jint*)env->GetPrimitiveArrayCritical(jid, 0);
	jint* x = (jint*)env->GetPrimitiveArrayCritical(jx, 0);
	jint* y = (jint*)env->GetPrimitiveArrayCritical(jy, 0);

	touchQueue_->push(2, size, id, x, y, actionIndex);

	env->ReleasePrimitiveArrayCritical(jid, id, 0);
	env->ReleasePrimitiveArrayCritical(jx, x, 0);
	env->ReleasePrimitiveArrayCritical(jy, y, 0);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeTouchesCancel(JNIEnv* env, jobject thiz, jint size, jintArray jid, jintArray jx, jintArray jy)
{
	jint* id = (jint*)env->GetPrimitiveArrayCritical(jid, 0);
	jint* x = (jint*)env->GetPrimitiveArrayCritical(jx, 0);
	jint* y = (jint*)env->GetPrimitiveArrayCritical(jy, 0);

	touchQueue_->push(3, size, id, x, y, -1);

	env->ReleasePrimitiveArrayCritical(jid, id, 0);
	env->ReleasePrimitiveArrayCritical(jx, x, 0);
	env->ReleasePrimitiveArrayCritical(jy, y, 0);
}

const int KEYCODE_SEARCH  = 84;
const int KEYCODE_BACK = 4;
const int KEYCODE_MENU  = 82;
const int KEYCODE_DPAD_CENTER = 23;
const int KEYCODE_DPAD_UP = 19;
const int KEYCODE_DPAD_DOWN = 20;
const int KEYCODE_DPAD_LEFT = 21;
const int KEYCODE_DPAD_RIGHT = 22;

static int convertKeyCode(int keyCode)
{
	static std::map<int, int> keyMap;

	if (keyMap.empty())
	{
		keyMap[KEYCODE_SEARCH] = KeyCode::SEARCH;
		keyMap[KEYCODE_BACK] = KeyCode::BACK;
		keyMap[KEYCODE_MENU] = KeyCode::MENU;
		keyMap[KEYCODE_DPAD_CENTER] = KeyCode::CENTER;
		keyMap[KEYCODE_DPAD_UP] = KeyCode::UP;
		keyMap[KEYCODE_DPAD_DOWN] = KeyCode::DOWN;
		keyMap[KEYCODE_DPAD_LEFT] = KeyCode::LEFT;
		keyMap[KEYCODE_DPAD_RIGHT] = KeyCode::RIGHT;
	}

	std::map<int, int>::const_iterator iter = keyMap.find(keyCode);

	if (iter == keyMap.end())
		return -1;

	return iter->second;
}

jboolean Java_com_giderosmobile_android_player_JavaNativeBridge_nativeKeyDown(JNIEnv* env, jclass cls, jint keyCode)
{
	keyCode = convertKeyCode(keyCode);
	if (keyCode == -1)
		return false;
	
	keyQueue_->push_back(std::make_pair(0, keyCode));
	
	if (player_ == true && running_ == false)
		return false;
		
	return true;
}

jboolean Java_com_giderosmobile_android_player_JavaNativeBridge_nativeKeyUp(JNIEnv* env, jclass cls, jint keyCode)
{
	keyCode = convertKeyCode(keyCode);
	if (keyCode == -1)
		return false;

	keyQueue_->push_back(std::make_pair(1, keyCode));

	if (player_ == true && running_ == false)
		return false;

	return true;
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeRestart(JNIEnv* env, jclass cls)
{
	debuglog("%s", "nativeRestart");

	try
	{
		Event event(Event::APPLICATION_RESUME);
		application_->broadcastEvent(&event);
	}
	catch (LuaException e)
	{
		luaError(e.what());
	}
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeStop(JNIEnv* env, jclass cls)
{
	debuglog("%s", "nativeStop");

	try
	{
		Event event(Event::APPLICATION_SUSPEND);
		application_->broadcastEvent(&event);
	}
	catch (LuaException e)
	{
		luaError(e.what());
	}

	if (g_server)
	{
		NetworkEvent event;
		g_server->tick(&event);
	}
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeDestroy(JNIEnv* env, jclass cls)
{
	debuglog("nativeDestroy 1");

	if (init_ == true)
		return;

	debuglog("nativeDestroy 2");

	init_ = true;

	deinitialize();
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeSetAccelerometer(JNIEnv* env, jclass cls, jfloat x, jfloat y, jfloat z)
{
	::setAccelerometer(x, y, z);
}


}
