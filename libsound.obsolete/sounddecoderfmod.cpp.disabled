#include "sounddecoderfmod.h"
#include <stdio.h>

#if 0
static void ERRCHECK(FMOD_RESULT result)
{
	if (result != FMOD_OK)
	{
		printf("FMOD error! (%d) %s\n", result, FMOD_ErrorString(result));
		exit(-1);
	}
}
#endif

static FMOD_RESULT F_CALLBACK soundEndCallback(FMOD_CHANNEL *channel, FMOD_CHANNEL_CALLBACKTYPE type, void *commanddata1, void *commanddata2)
{
	if (type == FMOD_CHANNEL_CALLBACKTYPE_END)
	{
		void *userdata;
		FMOD_Channel_GetUserData(channel, &userdata);

		SoundDecoderFMOD::SoundChannel_t* soundChannel = static_cast<SoundDecoderFMOD::SoundChannel_t*>(userdata);

		soundChannel->isPlaying = false;
		soundChannel->lastPosition = soundChannel->sound->length;

		if (soundChannel->callback != 0)
			soundChannel->callback(soundChannel->id, soundChannel->data);
	}

	return FMOD_OK;
}

unsigned int SoundDecoderFMOD::createSound(const char* fileName)
{
	FILE* fis = fopen(fileName, "rb");
	if (fis == 0)
	{
		setSoundError(eSoundFileNotFound);
		return 0;
	}
	fclose(fis);

	FMOD_SOUND* sound;
	FMOD_RESULT result = FMOD_System_CreateStream(system_, fileName, FMOD_LOOP_NORMAL | FMOD_2D | FMOD_SOFTWARE, 0, &sound);

	if (result != FMOD_OK)
	{
		setSoundError(eSoundFormatNotRecognized);
		return 0;
	}

	unsigned int length;
	FMOD_Sound_GetLength(sound, &length, FMOD_TIMEUNIT_MS);

	sounds_[nextid_] = new Sound_t(sound, length);

	return nextid_++;
}

void SoundDecoderFMOD::destroySound(unsigned int sound)
{
	std::map<unsigned int, Sound_t*>::iterator iter = sounds_.find(sound);

	if (iter == sounds_.end())
		return;

	if (iter->second->soundChannels.empty() == false)
		return;

	FMOD_Sound_Release(iter->second->sound);

	delete iter->second;

	sounds_.erase(iter);
}

void SoundDecoderFMOD::destroyAll()
{
	while (soundChannels_.empty() == false)
		destroySoundChannel(soundChannels_.begin()->first);

	while (sounds_.empty() == false)
		destroySound(sounds_.begin()->first);
}

double SoundDecoderFMOD::getSoundLength(unsigned int sound)
{
	std::map<unsigned int, Sound_t*>::iterator iter = sounds_.find(sound);

	if (iter == sounds_.end())
		return 0;

	return iter->second->length;
}

unsigned int SoundDecoderFMOD::playSound(unsigned int sound, double msec, int loops)
{
	std::map<unsigned int, Sound_t*>::iterator iter = sounds_.find(sound);

	if (iter == sounds_.end())
		return 0;

	loops--;
	if (loops < 0)
		loops = 0;

	FMOD_CHANNEL* channel;
	FMOD_System_PlaySound(system_, FMOD_CHANNEL_FREE, iter->second->sound, true, &channel);

	SoundChannel_t* soundChannel = new SoundChannel_t(iter->second, channel, nextid_, true, msec);

	FMOD_Channel_SetCallback(channel, soundEndCallback);
	FMOD_Channel_SetUserData(channel, soundChannel);
	FMOD_Channel_SetPosition(channel, msec, FMOD_TIMEUNIT_MS);
	FMOD_Channel_SetLoopCount(channel, loops);
	FMOD_Channel_SetPaused(channel, false);

	iter->second->soundChannels.insert(soundChannel);

	soundChannels_[nextid_] = soundChannel;

	return nextid_++;
}


void SoundDecoderFMOD::destroySoundChannel(unsigned int soundChannel)
{
	std::map<unsigned int, SoundChannel_t*>::iterator iter = soundChannels_.find(soundChannel);

	if (iter == soundChannels_.end())
		return;

	iter->second->sound->soundChannels.erase(iter->second);
	FMOD_Channel_SetCallback(iter->second->channel, NULL);
	FMOD_Channel_Stop(iter->second->channel);
	delete iter->second;
	soundChannels_.erase(iter);
}

/*
void SoundDecoderFMOD::stopSoundChannel(unsigned int soundChannel)
{
	std::map<unsigned int, SoundChannel_t*>::iterator iter = soundChannels_.find(soundChannel);

	if (iter == soundChannels_.end())
		return;

	iter->second->channel->stop();
}
*/

double SoundDecoderFMOD::getSoundChannelOffset(unsigned int soundChannel)
{
	std::map<unsigned int, SoundChannel_t*>::iterator iter = soundChannels_.find(soundChannel);

	if (iter == soundChannels_.end())
		return 0;

	if (iter->second->isPlaying == true)
	{
		unsigned int position;
		FMOD_Channel_GetPosition(iter->second->channel, &position, FMOD_TIMEUNIT_MS);
		iter->second->lastPosition = position;
	}

	return iter->second->lastPosition;
}

void SoundDecoderFMOD::setSoundCompleteCallback(unsigned int soundChannel, void(*callback)(unsigned int, void*), void* data)
{
	std::map<unsigned int, SoundChannel_t*>::iterator iter = soundChannels_.find(soundChannel);

	if (iter == soundChannels_.end())
		return;

	iter->second->callback = callback;
	iter->second->data = data;
}

