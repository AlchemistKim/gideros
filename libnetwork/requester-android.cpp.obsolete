#include "requester.h"
#include <jni.h>
#include <deque>
#include <vector>
#include <map>
#include <javanativebridge.h>


class RequestNetworkManager
{
public:
	RequestNetworkManager()
	{
		JNIEnv* env = jnb_getEnv();

		jclass localRefCls = env->FindClass("com/giderosmobile/android/player/JavaNativeBridge");
		javaNativeBridge_ = (jclass)env->NewGlobalRef(localRefCls);
		env->DeleteLocalRef(localRefCls);

		req_loadID_ = env->GetStaticMethodID(javaNativeBridge_, "req_load", "(Ljava/lang/String;[BJ)I");
		req_closeID_ = env->GetStaticMethodID(javaNativeBridge_, "req_close", "(I)V");
		req_deleteID_ = env->GetStaticMethodID(javaNativeBridge_, "req_delete", "(I)V");
		req_deleteallID_ = env->GetStaticMethodID(javaNativeBridge_, "req_deleteall", "()V");
	}

	~RequestNetworkManager()
	{
		JNIEnv* env = jnb_getEnv();
		env->DeleteGlobalRef(javaNativeBridge_);
	}

	int load(const char* url,
			 req_callback_type callback,
			 req_progress_callback_type progresscallback,
			 void* callbackdata,
			 const URLVariables* variables/* = NULL*/)
	{
		JNIEnv* env = jnb_getEnv();

		jstring jurl = env->NewStringUTF(url);

		jbyteArray postdata = NULL;
		if (variables && variables->method == URLVariables::ePost)
		{
			postdata = env->NewByteArray(variables->post.size());
			if (!variables->post.empty())
				env->SetByteArrayRegion(postdata, 0, variables->post.size(), (jbyte*)&variables->post[0]);
		}

		int id = env->CallStaticIntMethod(javaNativeBridge_, req_loadID_, jurl, postdata, (jlong)this);

		env->DeleteLocalRef(jurl);

		if (postdata)
			env->DeleteLocalRef(postdata);

		CallbackElement element;
		element.id = id;
		element.callback = callback;
		element.progresscallback = progresscallback;
		element.callbackdata = callbackdata;

		callbacks_[id] = element;

		return id;
	}

	void tick()
	{
		while (!callbackqueue_.empty())
		{
			CallbackQueueElement e = callbackqueue_.front();
			callbackqueue_.pop_front();

			if (callbacks_.find(e.id) != callbacks_.end())
			{
				if (e.callback)
				{
					if (e.data.empty())
						e.callback(e.id, e.error, NULL, 0, e.callbackdata);
					else
						e.callback(e.id, e.error, &e.data[0], e.data.size(), e.callbackdata);
				}

				if (e.progresscallback)
					e.progresscallback(e.id, e.bytesLoaded, e.bytesTotal, e.callbackdata);
			}
		}
	}

	void close(int id)
	{
		callbacks_.erase(id);

		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, req_closeID_, (jint)id);
	}

	void del(int id)
	{
		callbacks_.erase(id);

		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, req_deleteID_, (jint)id);
	}

	void deleteall()
	{
		callbacks_.clear();
		callbackqueue_.clear();

		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, req_deleteallID_);
	}

	void completeCallback(int id, jbyte* ptr, int length)
	{
		std::map<int, CallbackElement>::iterator iter = callbacks_.find(id);

		if (iter == callbacks_.end())
			return;

		// add two progress event with 0 and bytesTotal
		{
			CallbackQueueElement element;
			element.id = id;

			element.callback = NULL;
			element.progresscallback = iter->second.progresscallback;
			element.callbackdata = iter->second.callbackdata;

			element.bytesLoaded = 0;
			element.bytesTotal = length;

			callbackqueue_.push_back(element);

			element.bytesLoaded = length;

			callbackqueue_.push_back(element);
		}

		CallbackQueueElement element;
		element.id = id;

		element.error = 0;
		element.data.resize(length);
		memcpy(&element.data[0], ptr, length);

		element.callback = iter->second.callback;
		element.progresscallback = NULL;
		element.callbackdata = iter->second.callbackdata;

		callbackqueue_.push_back(element);
	}

	void errorCallback(int id)
	{
		std::map<int, CallbackElement>::iterator iter = callbacks_.find(id);

		if (iter == callbacks_.end())
			return;

		CallbackQueueElement element;
		element.id = id;
		element.error = 1;

		element.callback = iter->second.callback;
		element.progresscallback = NULL;
		element.callbackdata = iter->second.callbackdata;

		callbackqueue_.push_back(element);
	}

private:
	jclass javaNativeBridge_;

	jmethodID req_loadID_;
	jmethodID req_closeID_;
	jmethodID req_deleteID_;
	jmethodID req_deleteallID_;

	struct CallbackQueueElement
	{
		int id;
		int error;					// 0 -> no error

		std::vector<char> data;

		size_t bytesLoaded;
		size_t bytesTotal;

		req_callback_type callback;
		req_progress_callback_type progresscallback;
		void* callbackdata;
	};

	struct CallbackElement
	{
		int id;
		req_callback_type callback;
		req_progress_callback_type progresscallback;
		void* callbackdata;
	};

	std::deque<CallbackQueueElement> callbackqueue_;
	std::map<int, CallbackElement> callbacks_;
};


extern "C"
{

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeRequesterCompleteCallback(JNIEnv* env, jclass cls, jint id, jbyteArray jptr, jint length, jlong data)
{
	RequestNetworkManager* that = (RequestNetworkManager*)data;

	jbyte* ptr = (jbyte*)env->GetPrimitiveArrayCritical(jptr, 0);
	that->completeCallback(id, ptr, length);
	env->ReleasePrimitiveArrayCritical(jptr, ptr, 0);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeRequesterErrorCallback(JNIEnv* env, jclass cls, jint id, jlong data)
{
	RequestNetworkManager* that = (RequestNetworkManager*)data;

	that->errorCallback(id);
}


}


RequestNetworkManager* g_manager = NULL;

void req_init()
{
	g_manager = new RequestNetworkManager;
}

void req_cleanup()
{
	delete g_manager;
	g_manager = NULL;
}

int req_load(const char* url,
			 req_callback_type callback,
			 req_progress_callback_type progresscallback,
			 void* callbackdata,
			 const URLVariables* variables/* = NULL*/)
{
	return g_manager->load(url, callback, progresscallback, callbackdata, variables);
}
void req_tick()
{
	g_manager->tick();
}

void req_close(int id)
{
	g_manager->close(id);
}

void req_delete(int id)
{
	g_manager->del(id);
}

void req_deleteall()
{
	g_manager->deleteall();
}
