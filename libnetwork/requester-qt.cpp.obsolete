#include "requester.h"
#include "requester-qt.h"
#include <QDebug>

RequestNetworkManager::RequestNetworkManager()
{
	manager_ = new QNetworkAccessManager(this);
	nextid_ = 1;
	connect(manager_, SIGNAL(authenticationRequired(QNetworkReply*, QAuthenticator*)),
			this,		SLOT(authenticationRequired(QNetworkReply*, QAuthenticator*)));
	connect(manager_, SIGNAL(finished(QNetworkReply*)),
			this,		SLOT(finished(QNetworkReply*)));
/*	connect(manager_, SIGNAL(networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)),
			this,		SLOT(networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility))); */
	connect(manager_, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)),
			this,		SLOT(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)));
	connect(manager_, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError>&)),
			this,		SLOT(sslErrors(QNetworkReply*, const QList<QSslError>&)));
}

RequestNetworkManager::~RequestNetworkManager()
{
	delete manager_;
}

int RequestNetworkManager::load(const char* url,
								req_callback_type callback,
								req_progress_callback_type progresscallback,
								void* callbackdata,
								const URLVariables* variables/* = NULL*/)

{
	QNetworkReply* reply = NULL;

	if (variables == NULL)
		reply = manager_->get(QNetworkRequest(QUrl::fromEncoded(url)));
	else
	{
		if (variables->method == URLVariables::eGet)
		{
			QUrl qurl = QUrl::fromEncoded(url);

/*			for (size_t i = 0; i < variables->get.size(); ++i)
			{
				QString key = QString::fromUtf8(variables->get[i].first.c_str());
				QString value = QString::fromUtf8(variables->get[i].second.c_str());

				qurl.addQueryItem(key, value);
			} */

			reply = manager_->get(QNetworkRequest(qurl));
		}
		else
		{
			QByteArray data;
			if (!variables->post.empty())
				data = QByteArray(&variables->post[0], variables->post.size());

			reply = manager_->post(QNetworkRequest(QUrl::fromEncoded(url)), data);
		}
	}

	connect(reply, SIGNAL(downloadProgress(qint64, qint64)),
			this,	 SLOT(downloadProgress(qint64, qint64)));
	connect(reply, SIGNAL(error(QNetworkReply::NetworkError)),
			this,	 SLOT(error(QNetworkReply::NetworkError)));
	connect(reply, SIGNAL(finished()),
			this, SLOT(finished()));
	connect(reply, SIGNAL(metaDataChanged()),
			this, SLOT(metaDataChanged()));
	connect(reply, SIGNAL(sslErrors(const QList<QSslError>&)),
			this, SLOT(sslErrors(const QList<QSslError>&)));
	connect(reply, SIGNAL(uploadProgress(qint64, qint64)),
			this, SLOT(uploadProgress(qint64, qint64)));

	NetworkReply* reply2 = new NetworkReply;

	reply2->reply = reply;
	reply2->callback = callback;
	reply2->progresscallback = progresscallback;
	reply2->callbackdata = callbackdata;

	nr1_[reply] = nextid_;
	nr2_[nextid_] = reply2;
	return nextid_++;
}

void RequestNetworkManager::close(int id)
{
	if (nr2_.find(id) != nr2_.end())
	{
		NetworkReply* reply2 = nr2_[id];
		QNetworkReply* reply = reply2->reply;

		if (nr1_.find(reply) != nr1_.end())
		{
			nr1_.erase(reply);
			reply->deleteLater();
		}
	}

	if (!callbackqueue_.empty())
		for (size_t i = callbackqueue_.size() - 1; i >= 0; --i)
			if (callbackqueue_[i].id == id)
				callbackqueue_.erase(callbackqueue_.begin() + i);
}

void RequestNetworkManager::del(int id)
{
	close(id);

	if (nr2_.find(id) != nr2_.end())
	{
		delete nr2_[id];
		nr2_.erase(id);
	}
}

void RequestNetworkManager::deleteall()
{
	callbackqueue_.clear();

	for (std::map<QNetworkReply*, int>::iterator iter = nr1_.begin(); iter != nr1_.end(); ++iter)
		iter->first->deleteLater();

	nr1_.clear();

	for (std::map<int, NetworkReply*>::iterator iter = nr2_.begin(); iter != nr2_.end(); ++iter)
		delete iter->second;

	nr2_.clear();
}

void RequestNetworkManager::tick()
{
	while (!callbackqueue_.empty())
	{
		CallbackQueueElement e = callbackqueue_.front();
		callbackqueue_.pop_front();

		if (e.callback)
			e.callback(e.id, e.error, e.ptr, e.size, e.callbackdata);

		if (e.progresscallback)
			e.progresscallback(e.id, e.bytesLoaded, e.bytesTotal, e.callbackdata);
	}
}


void RequestNetworkManager::authenticationRequired(QNetworkReply* reply, QAuthenticator* authenticator)
{

}

void RequestNetworkManager::finished(QNetworkReply* reply)
{
	if (nr1_.find(reply) != nr1_.end())
	{
		int id = nr1_[reply];
		NetworkReply* reply2 = nr2_[id];
		reply2->data = reply->readAll();

		nr1_.erase(reply);
		reply->deleteLater();

		if (reply2->callback)
		{
			CallbackQueueElement e;
			e.id = id;
			e.error = 0;
			e.ptr = reply2->data.data();
			e.size = reply2->data.size();
			e.callback = reply2->callback;
			e.progresscallback = NULL;
			e.callbackdata = reply2->callbackdata;

			callbackqueue_.push_back(e);
		}
	}
}

/*
void RequestNetworkManager::networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility accessible)
{

}
*/
void RequestNetworkManager::proxyAuthenticationRequired(const QNetworkProxy& proxy, QAuthenticator* authenticator)
{

}

void RequestNetworkManager::sslErrors(QNetworkReply* reply, const QList<QSslError>& errors)
{

}


void RequestNetworkManager::downloadProgress(qint64 bytesReceived, qint64 bytesTotal)
{
	QNetworkReply* reply = qobject_cast<QNetworkReply*>(sender());

	if (nr1_.find(reply) != nr1_.end())
	{
		int id = nr1_[reply];
		NetworkReply* reply2 = nr2_[id];

		if (reply2->progresscallback)
		{
			CallbackQueueElement e;
			e.id = id;
			e.bytesLoaded = bytesReceived;
			e.bytesTotal = bytesTotal;
			e.callback = NULL;
			e.progresscallback = reply2->progresscallback;
			e.callbackdata = reply2->callbackdata;

			callbackqueue_.push_back(e);
		}
	}
}

void RequestNetworkManager::error(QNetworkReply::NetworkError code)
{
	QNetworkReply* reply = qobject_cast<QNetworkReply*>(sender());

	if (nr1_.find(reply) != nr1_.end())
	{
		int id = nr1_[reply];
		NetworkReply* reply2 = nr2_[id];

		nr1_.erase(reply);
		reply->deleteLater();

		if (reply2->callback)
		{
			CallbackQueueElement e;
			e.id = id;
			e.error = 1;
			e.ptr = NULL;
			e.size = 0;
			e.callback = reply2->callback;
			e.progresscallback = NULL;
			e.callbackdata = reply2->callbackdata;

			callbackqueue_.push_back(e);
		}
	}
}

void RequestNetworkManager::finished()
{

}

void RequestNetworkManager::metaDataChanged()
{

}

void RequestNetworkManager::sslErrors(const QList<QSslError>& errors)
{

}

void RequestNetworkManager::uploadProgress(qint64 bytesSent, qint64 bytesTotal)
{

}


static RequestNetworkManager* g_manager = NULL;

void req_init()
{
	g_manager = new RequestNetworkManager;
}

void req_cleanup()
{
	delete g_manager;
	g_manager = NULL;
}

int req_load(const char* url,
			 req_callback_type callback,
			 req_progress_callback_type progresscallback,
			 void* callbackdata,
			 const URLVariables* variables/* = NULL*/)
{
	return g_manager->load(url, callback, progresscallback, callbackdata, variables);
}

void req_tick()
{
	g_manager->tick();
}

void req_close(int id)
{
	g_manager->close(id);
}

void req_delete(int id)
{
	g_manager->del(id);
}

void req_deleteall()
{
	g_manager->deleteall();
}
