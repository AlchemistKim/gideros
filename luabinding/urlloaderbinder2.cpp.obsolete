#include "urlloaderbinder2.h"
#include <urlloader2.h>
#include "keys.h"
#include "luautil.h"
#include "stackchecker.h"
#include <gstatus.h>

#ifndef abs_index
#define abs_index(L, i) ((i) > 0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

#define GET "get"
#define POST "post"
#define PUT "put"
#define DELETE "delete"

static char key_urlloaders = ' ';

UrlLoaderBinder2::UrlLoaderBinder2(lua_State* L)
{
    Binder binder(L);

    static const luaL_Reg functionList[] = {
        {"load", load},
        {"close", close},
        {NULL, NULL},
    };

    binder.createClass("UrlLoader", "EventDispatcher", create, destruct, functionList);

    lua_getglobal(L, "UrlLoader");

    lua_pushstring(L, GET);
    lua_setfield(L, -2, "GET");

    lua_pushstring(L, POST);
    lua_setfield(L, -2, "POST");

    lua_pushstring(L, PUT);
    lua_setfield(L, -2, "PUT");

    lua_pushstring(L, DELETE);
    lua_setfield(L, -2, "DELETE");

    lua_pop(L, 1);

    lua_newtable(L);
    luaL_rawsetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
}

static void load(lua_State* L,
                 UrlLoader2* urlloader,
                 int index)
{
    if (!lua_isnoneornil(L, index))
    {
        const char* url = luaL_checkstring(L, index);

        int method = 0;
        if (!lua_isnoneornil(L, index + 1))
        {
            const char* methodstr = luaL_checkstring(L, index + 1);

            if (strcmp(methodstr, GET) == 0)
                method = 0;
            else if (strcmp(methodstr, POST) == 0)
                method = 1;
            else if (strcmp(methodstr, PUT) == 0)
                method = 2;
            else if (strcmp(methodstr, DELETE) == 0)
                method = 3;
            else
            {
                GStatus status(2010, "method");	// Error #2010 "Field %s must be one of the accepted values."
                luaL_error(L, status.errorString());
            }
        }

        std::vector<std::pair<std::string, std::string> > header;
        std::vector<ghttp_Header> header2;
        ghttp_Header *header3 = NULL;
        if (lua_type(L, index + 2) == LUA_TTABLE)
        {
            int t = abs_index(L, index + 2);
            lua_pushnil(L);
            while (lua_next(L, t) != 0)
            {
                lua_pushvalue(L, -2);
                std::string key = luaL_checkstring(L, -1);
                lua_pop(L, 1);

                std::string value = luaL_checkstring(L, -1);

                header.push_back(std::make_pair(key, value));

                lua_pop(L, 1);
            }

            header2.resize(header.size());
            for (size_t i = 0; i < header.size(); ++i)
            {
                header2[i].name = header[i].first.c_str();
                header2[i].value = header[i].second.c_str();
            }

            ghttp_Header null = {NULL, NULL};
            header2.push_back(null);

            header3 = &header2[0];
        }

        if (method == 0)
        {
            if (urlloader)
                urlloader->get(url, header3);
        }
        else if (method == 1)
        {
            const char* data = NULL;
            size_t size = 0;
            int di = header3 ? 3 : 2;
            if (!lua_isnoneornil(L, index + di))
                data = luaL_checklstring(L, index + di, &size);

            if (urlloader)
                urlloader->post(url, header3, data, size);
        }
        else if (method == 2)
        {
            const char* data = NULL;
            size_t size = 0;
            int di = header3 ? 3 : 2;
            if (!lua_isnoneornil(L, index + di))
                data = luaL_checklstring(L, index + di, &size);

            if (urlloader)
                urlloader->put(url, header3, data, size);
        }
        else if (method == 3)
        {
            if (urlloader)
                urlloader->deleteResource(url, header3);
        }
    }
}

int UrlLoaderBinder2::create(lua_State* L)
{
    Binder binder(L);

    ::load(L, NULL, 1);

    UrlLoader2* urlloader = new UrlLoader2();
    ::load(L, urlloader, 1);
    urlloader->setCallback(callback, L, urlloader);

    binder.pushInstance("UrlLoader", urlloader);

    luaL_rawgetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
    lua_pushlightuserdata(L, urlloader);
    lua_pushvalue(L, -3);
    lua_rawset(L, -3);
    lua_pop(L, 1);

    return 1;
}

int UrlLoaderBinder2::destruct(lua_State* L)
{
    void* ptr = *(void**)lua_touserdata(L, 1);
    UrlLoader2* urlloader = static_cast<UrlLoader2*>(ptr);
    urlloader->unref();

    return 0;
}

int UrlLoaderBinder2::load(lua_State* L)
{
    Binder binder(L);
    UrlLoader2* urlloader = static_cast<UrlLoader2*>(binder.getInstance("UrlLoader", 1));

    ::load(L, urlloader, 2);

    return 0;
}

int UrlLoaderBinder2::close(lua_State* L)
{
    StackChecker checker(L, "UrlLoaderBinder2::close", 0);

    Binder binder(L);
    UrlLoader2* urlloader = static_cast<UrlLoader2*>(binder.getInstance("UrlLoader", 1));

    urlloader->close();

    luaL_rawgetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
    lua_pushnil(L);
    luaL_rawsetptr(L, -2, urlloader);
    lua_pop(L, 1);

    return 0;
}

void UrlLoaderBinder2::callback(int type, void* data, void* udata1, void* udata2)
{
    lua_State* L = (lua_State*)udata1;
    UrlLoader2* urlloader = static_cast<UrlLoader2*>(udata2);

    StackChecker checker(L, "UrlLoaderBinder2::callback", 0);

    luaL_rawgetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
    luaL_rawgetptr(L, -1, urlloader);

    if (lua_isnil(L, -1))
    {
        lua_pop(L, 2);
        return;
    }

    lua_getfield(L, -1, "dispatchEvent");

    lua_pushvalue(L, -2); // create copy of UrlLoader object

    lua_getglobal(L, "Event");
    lua_getfield(L, -1, "new");
    lua_remove(L, -2);				// remove global "Event"

    if (type == GHTTP_RESPONSE)
    {
        lua_pushstring(L, "complete");
        lua_call(L, 1, 1); // call Event.new

        ghttp_Response* d = (ghttp_Response*)data;

        lua_pushlstring(L, (char*)d->data, d->size);
        lua_setfield(L, -2, "data");
    }
    else if (type == GHTTP_ERROR)
    {
        lua_pushstring(L, "error");
        lua_call(L, 1, 1); // call Event.new
    }
    else if (type == GHTTP_PROGRESS)
    {
        lua_pushstring(L, "progress");
        lua_call(L, 1, 1); // call Event.new

        ghttp_Progress* d = (ghttp_Progress*)data;
        lua_pushinteger(L, d->bytesLoaded);
        lua_setfield(L, -2, "bytesLoaded");
        lua_pushinteger(L, d->bytesTotal);
        lua_setfield(L, -2, "bytesTotal");
    }

    lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

    lua_pop(L, 1);	// pop UrlLoader object

    if (type == GHTTP_RESPONSE || type == GHTTP_ERROR)
    {
        lua_pushnil(L);
        luaL_rawsetptr(L, -2, urlloader);
    }

    lua_pop(L, 1);  // pop key_urlloaders table
}
