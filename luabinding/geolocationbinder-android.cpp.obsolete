#include "geolocationbinder.h"
#include "stackchecker.h"
#include <eventdispatcher.h>
#include <jni.h>
#include <javanativebridge.h>
#include <platformutil.h>
#include "luaapplication.h"
#include <application.h>

class Geolocation : public EventDispatcher, public Ticker
{
public:
	Geolocation(lua_State* L) : L(L)
	{
		JNIEnv* env = jnb_getEnv();

		jclass localRefCls = env->FindClass("com/giderosmobile/android/player/JavaNativeBridge");
		javaNativeBridge_ = (jclass)env->NewGlobalRef(localRefCls);
		env->DeleteLocalRef(localRefCls);

		setCallbackDataID_ = env->GetStaticMethodID(javaNativeBridge_, "setGeolocationCallbackData", "(J)V");
		isAvailableID_ = env->GetStaticMethodID(javaNativeBridge_, "isGeolocationAvailable", "()Z");
		isHeadingAvailableID_ = env->GetStaticMethodID(javaNativeBridge_, "isHeadingAvailable", "()Z");
		setAccuracyID_ = env->GetStaticMethodID(javaNativeBridge_, "setGeolocationAccuracy", "(D)V");
		getAccuracyID_ = env->GetStaticMethodID(javaNativeBridge_, "getGeolocationAccuracy", "()D");
		setThresholdID_ = env->GetStaticMethodID(javaNativeBridge_, "setGeolocationThreshold", "(D)V");
		getThresholdID_ = env->GetStaticMethodID(javaNativeBridge_, "getGeolocationThreshold", "()D");
		startID_ = env->GetStaticMethodID(javaNativeBridge_, "startGeolocation", "()V");
		stopID_ = env->GetStaticMethodID(javaNativeBridge_, "stopGeolocation", "()V");
		startUpdatingLocationID_ = env->GetStaticMethodID(javaNativeBridge_, "startUpdatingLocation", "()V");
		stopUpdatingLocationID_ = env->GetStaticMethodID(javaNativeBridge_, "stopUpdatingLocation", "()V");
		startUpdatingHeadingID_ = env->GetStaticMethodID(javaNativeBridge_, "startUpdatingHeading", "()V");
		stopUpdatingHeadingID_ = env->GetStaticMethodID(javaNativeBridge_, "stopUpdatingHeading", "()V");

		env->CallStaticVoidMethod(javaNativeBridge_, setCallbackDataID_, (jlong)this);

		locationChanged_ = false;
		headingChanged_ = false;
	}

	~Geolocation()
	{
		stop();

		JNIEnv* env = jnb_getEnv();
		env->DeleteGlobalRef(javaNativeBridge_);
	}

	virtual void tick()
	{
		if (locationChanged_)
		{
			if (hasEventListener(LOCATION_UPDATE))
			{
				lua_pushlightuserdata(L, this);
				lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table

				lua_getfield(L, -1, "dispatchEvent");

				lua_pushvalue(L, -2); // create copy of geolocation

				lua_getfield(L, -1, "__updateLocationEvent");

				lua_pushnumber(L, latitude_);
				lua_setfield(L, -2, "latitude");
				lua_pushnumber(L, longitude_);
				lua_setfield(L, -2, "longitude");
				lua_pushnumber(L, altitude_);
				lua_setfield(L, -2, "altitude");

				lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

				lua_pop(L, 1);	// pop "geolocation" table
			}

			locationChanged_ = false;
		}

		if (headingChanged_)
		{
			if (hasEventListener(HEADING_UPDATE))
			{
				lua_pushlightuserdata(L, this);
				lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table

				lua_getfield(L, -1, "dispatchEvent");

				lua_pushvalue(L, -2); // create copy of geolocation

				lua_getfield(L, -1, "__updateHeadingEvent");

				lua_pushnumber(L, magneticHeading_);
				lua_setfield(L, -2, "magneticHeading");

				lua_pushnumber(L, trueHeading_);
				lua_setfield(L, -2, "trueHeading");

				lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

				lua_pop(L, 1);	// pop "geolocation" table
			}

			headingChanged_ = false;
		}
	}

	bool isAvailable()
	{
		JNIEnv* env = jnb_getEnv();
		return env->CallStaticBooleanMethod(javaNativeBridge_, isAvailableID_) != 0;
	}

	bool isHeadingAvailable()
	{
		JNIEnv* env = jnb_getEnv();
		return env->CallStaticBooleanMethod(javaNativeBridge_, isHeadingAvailableID_) != 0;
	}

	void setAccuracy(double accuracy)
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, setAccuracyID_, (jdouble)accuracy);
	}

	double getAccuracy()
	{
		JNIEnv* env = jnb_getEnv();
		return env->CallStaticDoubleMethod(javaNativeBridge_, getAccuracyID_);
	}

	void setThreshold(double threshold)
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, setThresholdID_, (jdouble)threshold);
	}

	double getThreshold()
	{
		JNIEnv* env = jnb_getEnv();
		return env->CallStaticDoubleMethod(javaNativeBridge_, getThresholdID_);
	}

	void start()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, startID_);
	}

	void stop()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, stopID_);
	}

	void startUpdatingLocation()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, startUpdatingLocationID_);
	}

	void stopUpdatingLocation()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, stopUpdatingLocationID_);
	}

	void startUpdatingHeading()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, startUpdatingHeadingID_);
	}

	void stopUpdatingHeading()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, stopUpdatingHeadingID_);
	}

	void locationChanged(double latitude, double longitude, double altitude)
	{
		latitude_ = latitude;
		longitude_ = longitude;
		altitude_ = altitude;
		locationChanged_ = true;
	}


	void headingChanged(double magneticHeading, double trueHeading)
	{
		magneticHeading_ = magneticHeading;
		trueHeading_ = trueHeading;
		headingChanged_ = true;
	}


	static Event::Type LOCATION_UPDATE;
	static Event::Type HEADING_UPDATE;
	static Event::Type ERROR;

private:
	jclass javaNativeBridge_;

	jmethodID setCallbackDataID_;
	jmethodID isAvailableID_;
	jmethodID isHeadingAvailableID_;
	jmethodID setAccuracyID_;
	jmethodID getAccuracyID_;
	jmethodID setThresholdID_;
	jmethodID getThresholdID_;
	jmethodID startID_;
	jmethodID stopID_;
	jmethodID startUpdatingLocationID_;
	jmethodID stopUpdatingLocationID_;
	jmethodID startUpdatingHeadingID_;
	jmethodID stopUpdatingHeadingID_;

	lua_State* L;

	double latitude_, longitude_, altitude_;
	bool locationChanged_;

	double magneticHeading_, trueHeading_;
	bool headingChanged_;
};

Event::Type Geolocation::LOCATION_UPDATE("locationUpdate");
Event::Type Geolocation::HEADING_UPDATE("headingUpdate");
Event::Type Geolocation::ERROR("error");

extern "C"
{
void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeLocationChanged(JNIEnv* env, jclass cls, jdouble latitude, jdouble longitude, jdouble altitude, jlong data)
{
	Geolocation* that = (Geolocation*)data;
	that->locationChanged(latitude, longitude, altitude);
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeHeadingChanged(JNIEnv* env, jclass cls, jdouble magneticHeading, jdouble trueHeading, jlong data)
{
	Geolocation* that = (Geolocation*)data;
	that->headingChanged(magneticHeading, trueHeading);
}

}


GeolocationBinder::GeolocationBinder(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::GeolocationBinder", 0);

	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");

	lua_pushcfunction(L, loader);
	lua_setfield(L, -2, "geolocation");

	lua_pop(L, 2);
}

int GeolocationBinder::loader(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::loader", 1);

	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"isAvailable", isAvailable},
		{"isHeadingAvailable", isHeadingAvailable},
		{"setAccuracy", setAccuracy},
		{"getAccuracy", getAccuracy},
		{"setThreshold", setThreshold},
		{"getThreshold", getThreshold},
		{"start", start},
		{"stop", stop},
		{"startUpdatingLocation", startUpdatingLocation},
		{"stopUpdatingLocation", stopUpdatingLocation},
		{"startUpdatingHeading", startUpdatingHeading},
		{"stopUpdatingHeading", stopUpdatingHeading},
		{NULL, NULL},
	};

	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));

	binder.createClass("Geolocation", "EventDispatcher", NULL, destruct, functionList);

	Geolocation* geolocation = new Geolocation(L);
	binder.pushInstance("Geolocation", geolocation);

	application->addTicker(geolocation);

	lua_getglobal(L, "Event");

	lua_pushstring(L, Geolocation::LOCATION_UPDATE.type());
	lua_setfield(L, -2, "LOCATION_UPDATE");

	lua_pushstring(L, Geolocation::HEADING_UPDATE.type());
	lua_setfield(L, -2, "HEADING_UPDATE");

	lua_getfield(L, -1, "new");
	lua_remove(L, -2);				// remove global "Event"

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::LOCATION_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateLocationEvent");

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::HEADING_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateHeadingEvent");

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::ERROR.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__errorEvent");

	lua_pop(L, 1);		// pop Event.new

	lua_pushlightuserdata(L, geolocation);
	lua_pushvalue(L, -2);
	lua_rawset(L, LUA_REGISTRYINDEX);

	lua_setglobal(L, "geolocation");
	
	lua_getglobal(L, "geolocation");
	return 1;
}

int GeolocationBinder::destruct(lua_State* L)
{
	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));

	void* ptr = *(void**)lua_touserdata(L, 1);
	Geolocation* geolocation = static_cast<Geolocation*>(ptr);
	geolocation->unref();

	application->removeTicker(geolocation);

	return 0;
}

int GeolocationBinder::isAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, geolocation->isAvailable());
	return 1;
}

int GeolocationBinder::isHeadingAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, geolocation->isHeadingAvailable());

	return 1;
}

int GeolocationBinder::setAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_Number accuracy = lua_tonumber(L, 2);
	geolocation->setAccuracy(accuracy);

	return 0;
}

int GeolocationBinder::getAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, geolocation->getAccuracy());

	return 1;
}

int GeolocationBinder::setThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_Number threshold = lua_tonumber(L, 2);
	geolocation->setThreshold(threshold);

	return 0;
}

int GeolocationBinder::getThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, geolocation->getThreshold());

	return 1;
}

int GeolocationBinder::start(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->start();

	return 0;
}
int GeolocationBinder::stop(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stop();

	return 0;
}
int GeolocationBinder::startUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->startUpdatingLocation();

	return 0;
}
int GeolocationBinder::stopUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stopUpdatingLocation();

	return 0;
}
int GeolocationBinder::startUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->startUpdatingHeading();

	return 0;
}
int GeolocationBinder::stopUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stopUpdatingHeading();

	return 0;
}
