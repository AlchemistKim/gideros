#include "soundbinder.h"
#include "sound.h"
#include "stackchecker.h"
#include "soundchannelbinder.h"

SoundBinder::SoundBinder(lua_State* L)
{
	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"getLength", SoundBinder::getLength},
		{NULL, NULL},
	};

	binder.createClass("Sound", NULL, SoundBinder::create, SoundBinder::destruct, functionList);
}

int SoundBinder::create(lua_State* L)
{
	StackChecker checker(L, "SoundBinder::create", 1);

	const char* fileName = luaL_checkstring(L, 1);

	Binder binder(L);
	GStatus status;
	Sound* sound = new Sound(fileName, &status);

	if (status.error() == true)
	{
		delete sound;
		return luaL_error(L, status.errorString());
	}

	binder.pushInstance("Sound", sound);

	return 1;

}

int SoundBinder::destruct(lua_State* L)
{
	void* ptr = *(void**)lua_touserdata(L, 1);
	Sound* sound = static_cast<Sound*>(ptr);
	sound->unref();

	return 0;
}

int SoundBinder::getLength(lua_State* L)
{
	StackChecker checker(L, "SoundBinder::getLength", 1);
	
	Binder binder(L);
	Sound* sound = static_cast<Sound*>(binder.getInstance("Sound"));

	lua_pushnumber(L, sound->length());

	return 1;
}

