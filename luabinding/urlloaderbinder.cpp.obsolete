#include "urlloaderbinder.h"
#include <urlloader.h>
#include "stackchecker.h"
#include <requester.h>
#include "keys.h"
#include "luautil.h"
#include "gstatus.h"
#include "giderosexception.h"


#ifndef abs_index

/* convert a stack index to positive */
#define abs_index(L, i)		((i) > 0 || (i) <= LUA_REGISTRYINDEX ? (i) : \
	lua_gettop(L) + (i) + 1)

#endif

#define GET "get"
#define POST "post"

URLLoaderBinder::URLLoaderBinder(lua_State* L)
{
	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"load", load},
//		{"getData", getData},
		{"close", close},
		{NULL, NULL},
	};

	binder.createClass("URLLoader", "EventDispatcher", create, destruct, functionList);

	lua_getglobal(L, "URLLoader");	// get URLLoader metatable

	lua_pushstring(L, GET);
	lua_setfield(L, -2, "GET");

	lua_pushstring(L, POST);
	lua_setfield(L, -2, "POST");

	lua_pop(L, 1);
}


static void toURLVariables(lua_State* L, int index, URLVariables* variables)
{
	StackChecker checker(L, "toURLVariables", 0);

	lua_getfield(L, index, "method");
	if (lua_isnil(L, -1))
	{
		GStatus status(2009, "method");	// Error #2009 "Field %s must exists."
		luaL_error(L, status.errorString());
	}

	const char* method = luaL_checkstring(L, -1);

	if (strcmp(method, GET) == 0)
	{
		variables->method = URLVariables::eGet;
	}
	else if (strcmp(method, POST) == 0)
	{
		variables->method = URLVariables::ePost;
	}
	else
	{
		GStatus status(2010, "method");	// Error #2010 "Field %s must be one of the accepted values."
		luaL_error(L, status.errorString());
	}

	lua_pop(L, 1);	// pop method

	lua_getfield(L, index, "data");

	if (lua_isnil(L, -1))
	{
		GStatus status(2009, "data");	// Error #2009 "Field %s must exists."
		luaL_error(L, status.errorString());
	}

	if (variables->method == URLVariables::eGet)
	{
		int t = abs_index(L, -1);

		/* table is in the stack at index 't' */
		lua_pushnil(L);  /* first key */
		while (lua_next(L, t) != 0)
		{
			/* uses 'key' (at index -2) and 'value' (at index -1) */
			lua_pushvalue(L, -2);
			std::string key = luaL_checkstring(L, -1);
			lua_pop(L, 1);

			std::string value = luaL_checkstring(L, -1);

			variables->get.push_back(std::make_pair(key, value));

			/* removes 'value'; keeps 'key' for next iteration */
			lua_pop(L, 1);
		}
	}
	else
	{
		size_t len;
		const char* value = luaL_checklstring(L, -1, &len);

		variables->post = std::vector<char>(value, value + len);
	}

	lua_pop(L, 1);	// pop data
}

int URLLoaderBinder::create(lua_State* L)
{
	StackChecker checker(L, "URLLoaderBinder::create", 1);

	Binder binder(L);

	URLLoader* urlloader = NULL;
	try
	{
		if (lua_isnoneornil(L, 1))
		{
			urlloader = new URLLoader;
		}
		else
		{
			const char* url = luaL_checkstring(L, 1);
			if (lua_isnoneornil(L, 2))
			{
				urlloader = new URLLoader(url);
			}
			else
			{
				URLVariables variables;
				toURLVariables(L, 2, &variables);
				urlloader = new URLLoader(url, &variables);
			}
		}
	}
	catch (const GiderosException& e)
	{
		luaL_error(L, e.what());
	}

	urlloader->setCallback(callback, L, urlloader);
	binder.pushInstance("URLLoader", urlloader);

	luaL_rawgetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
	lua_pushlightuserdata(L, urlloader);
	lua_pushvalue(L, -3);
	lua_rawset(L, -3);
	lua_pop(L, 1);

	return 1;
}

int URLLoaderBinder::destruct(lua_State* L)
{
	void* ptr = *(void**)lua_touserdata(L, 1);
	URLLoader* urlloader = static_cast<URLLoader*>(ptr);
	urlloader->unref();

	return 0;
}

int URLLoaderBinder::load(lua_State* L)
{
	StackChecker checker(L, "URLLoaderBinder::load", 0);

	Binder binder(L);
	URLLoader* urlloader = static_cast<URLLoader*>(binder.getInstance("URLLoader", 1));
	const char* url = luaL_checkstring(L, 2);

	try
	{
		if (lua_isnoneornil(L, 3))
		{
			urlloader->load(url);
		}
		else
		{
			URLVariables variables;
			toURLVariables(L, 3, &variables);
			urlloader->load(url, &variables);
		}
	}
	catch (const GiderosException& e)
	{
		luaL_error(L, e.what());
	}

	return 0;
}

/*
int URLLoaderBinder::getData(lua_State* L)
{
	StackChecker checker(L, "URLLoaderBinder::getData", 1);

	Binder binder(L);
	URLLoader* urlloader = static_cast<URLLoader*>(binder.getInstance("URLLoader", 1));

	lua_pushlstring(L, &urlloader->data[0], urlloader->data.size());

	return 1;
}
*/

void URLLoaderBinder::callback(void* Lp, void* urlloaderp)
{
	lua_State* L = static_cast<lua_State*>(Lp);
	URLLoader* urlloader = static_cast<URLLoader*>(urlloaderp);

	StackChecker checker(L, "URLLoaderBinder::callback", 0);

	luaL_rawgetptr(L, LUA_REGISTRYINDEX, &key_urlloaders);
	lua_pushlightuserdata(L, urlloader);
	lua_rawget(L, -2);

	if (!lua_isnil(L, -1))
	{
		lua_pushlstring(L, &urlloader->data[0], urlloader->data.size());
		lua_setfield(L, -2, "data");
	}

	lua_pop(L, 2);
}

int URLLoaderBinder::close(lua_State* L)
{
	StackChecker checker(L, "URLLoaderBinder::load", 0);

	Binder binder(L);
	URLLoader* urlloader = static_cast<URLLoader*>(binder.getInstance("URLLoader", 1));

	urlloader->close();

	return 0;
}
