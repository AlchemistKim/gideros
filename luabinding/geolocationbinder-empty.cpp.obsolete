#include "geolocationbinder.h"
#include "stackchecker.h"
#include <eventdispatcher.h>

GeolocationBinder::GeolocationBinder(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::GeolocationBinder", 0);

	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");

	lua_pushcfunction(L, loader);
	lua_setfield(L, -2, "geolocation");

	lua_pop(L, 2);
}

int GeolocationBinder::loader(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::loader", 1);

	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"isAvailable", isAvailable},
		{"isHeadingAvailable", isHeadingAvailable},
		{"setAccuracy", setAccuracy},
		{"getAccuracy", getAccuracy},
		{"setThreshold", setThreshold},
		{"getThreshold", getThreshold},
		{"start", start},
		{"stop", stop},
		{"startUpdatingLocation", startUpdatingLocation},
		{"stopUpdatingLocation", stopUpdatingLocation},
		{"startUpdatingHeading", startUpdatingHeading},
		{"stopUpdatingHeading", stopUpdatingHeading},
		{NULL, NULL},
	};

	binder.createClass("Geolocation", "EventDispatcher", NULL, destruct, functionList);

	binder.pushInstance("Geolocation", new EventDispatcher);
	lua_setglobal(L, "geolocation");


	lua_getglobal(L, "Event");	// get metatable

	lua_pushstring(L, "locationUpdate");
	lua_setfield(L, -2, "LOCATION_UPDATE");

	lua_pushstring(L, "headingUpdate");
	lua_setfield(L, -2, "HEADING_UPDATE");

	lua_pop(L, 1);

	lua_getglobal(L, "geolocation");
	return 1;
}

int GeolocationBinder::destruct(lua_State* L)
{
	void* ptr = *(void**)lua_touserdata(L, 1);
	EventDispatcher* eventDispatcher = static_cast<EventDispatcher*>(ptr);
	eventDispatcher->unref();

	return 0;
}

int GeolocationBinder::isAvailable(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, 0);
	return 1;
}

int GeolocationBinder::isHeadingAvailable(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, 0);
	return 1;
}

int GeolocationBinder::setAccuracy(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::getAccuracy(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, 0);
	return 1;
}

int GeolocationBinder::setThreshold(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::getThreshold(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, 0);
	return 1;
}

int GeolocationBinder::start(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::stop(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::startUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::stopUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::startUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}

int GeolocationBinder::stopUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	(void)static_cast<EventDispatcher*>(binder.getInstance("Geolocation", 1));

	return 0;
}
