#include "geolocationbinder.h"
#include <geolocation.h>
#include "stackchecker.h"
#include "luaapplication.h"

struct GeolocationCallbackData
{
	lua_State* L;
	Geolocation* geolocation;
};

static Event::Type LOCATION_UPDATE("locationUpdate");
static Event::Type HEADING_UPDATE("headingUpdate");
static Event::Type ERROR("error");

static void locationCallback(void* data, float latitude, float longitude, float altitude)
{
	lua_State* L = ((GeolocationCallbackData*)data)->L;
	Geolocation* geolocation = ((GeolocationCallbackData*)data)->geolocation;

	if (geolocation->hasEventListener(LOCATION_UPDATE))
	{
		lua_pushlightuserdata(L, geolocation);
		lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table

		lua_getfield(L, -1, "dispatchEvent");

		lua_pushvalue(L, -2); // create copy of geolocation

		lua_getfield(L, -1, "__updateLocationEvent");

		lua_pushnumber(L, latitude);
		lua_setfield(L, -2, "latitude");
		lua_pushnumber(L, longitude);
		lua_setfield(L, -2, "longitude");
		lua_pushnumber(L, altitude);
		lua_setfield(L, -2, "altitude");

		lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

		lua_pop(L, 1);	// pop "geolocation" table
	}
}

static void headingCallback(void* data, float magneticHeading, float trueHeading)
{
	lua_State* L = ((GeolocationCallbackData*)data)->L;
	Geolocation* geolocation = ((GeolocationCallbackData*)data)->geolocation;

	if (geolocation->hasEventListener(HEADING_UPDATE))
	{
		lua_pushlightuserdata(L, geolocation);
		lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table

		lua_getfield(L, -1, "dispatchEvent");

		lua_pushvalue(L, -2); // create copy of geolocation

		lua_getfield(L, -1, "__updateHeadingEvent");

		lua_pushnumber(L, magneticHeading);
		lua_setfield(L, -2, "magneticHeading");

		lua_pushnumber(L, trueHeading);
		lua_setfield(L, -2, "trueHeading");

		lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

		lua_pop(L, 1);	// pop "geolocation" table
	}
}

static void errorCallback(void* data)
{
	lua_State* L = ((GeolocationCallbackData*)data)->L;
	Geolocation* geolocation = ((GeolocationCallbackData*)data)->geolocation;

	if (geolocation->hasEventListener(ERROR))
	{
		lua_pushlightuserdata(L, geolocation);
		lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table

		lua_getfield(L, -1, "dispatchEvent");

		lua_pushvalue(L, -2); // create copy of geolocation

		lua_getfield(L, -1, "__errorEvent");

		lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)

		lua_pop(L, 1);	// pop "geolocation" table
	}
}

static std::map<Geolocation*, GeolocationCallbackData*> map;

GeolocationBinder::GeolocationBinder(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::GeolocationBinder", 0);

	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");

	lua_pushcfunction(L, loader);
	lua_setfield(L, -2, "geolocation");

	lua_pop(L, 2);
}

int GeolocationBinder::loader(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::loader", 1);

	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"isAvailable", isAvailable},
		{"isHeadingAvailable", isHeadingAvailable},
		{"setAccuracy", setAccuracy},
		{"getAccuracy", getAccuracy},
		{"setThreshold", setThreshold},
		{"getThreshold", getThreshold},
		{"start", start},
		{"stop", stop},
		{"startUpdatingLocation", startUpdatingLocation},
		{"stopUpdatingLocation", stopUpdatingLocation},
		{"startUpdatingHeading", startUpdatingHeading},
		{"stopUpdatingHeading", stopUpdatingHeading},
		{NULL, NULL},
	};

	binder.createClass("Geolocation", "EventDispatcher", NULL, destruct, functionList);

	GeolocationCallbackData* callbackData = new GeolocationCallbackData;
	Geolocation* geolocation = new Geolocation(locationCallback, headingCallback, errorCallback, callbackData);
	callbackData->geolocation = geolocation;
	callbackData->L = L;

	map[geolocation] = callbackData;

	binder.pushInstance("Geolocation", geolocation);

	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));
	application->addTicker(geolocation);

	lua_getglobal(L, "Event");

	lua_pushstring(L, LOCATION_UPDATE.type());
	lua_setfield(L, -2, "LOCATION_UPDATE");

	lua_pushstring(L, HEADING_UPDATE.type());
	lua_setfield(L, -2, "HEADING_UPDATE");

	lua_getfield(L, -1, "new");
	lua_remove(L, -2);				// remove global "Event"

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, LOCATION_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateLocationEvent");

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, HEADING_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateHeadingEvent");

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, ERROR.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__errorEvent");

	lua_pop(L, 1);		// pop Event.new

	lua_pushlightuserdata(L, geolocation);
	lua_pushvalue(L, -2);
	lua_rawset(L, LUA_REGISTRYINDEX);

	lua_setglobal(L, "geolocation");

	lua_getglobal(L, "geolocation");
	return 1;

}

int GeolocationBinder::destruct(lua_State* L)
{
	void* ptr = *(void**)lua_touserdata(L, 1);
	Geolocation* geolocation = static_cast<Geolocation*>(ptr);
	geolocation->unref();

	delete map[geolocation];
	map.erase(geolocation);

	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));
	application->removeTicker(geolocation);

	return 0;
}

int GeolocationBinder::isAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, geolocation->isAvailable() ? 1 : 0);

	return 1;
}


int GeolocationBinder::isHeadingAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, geolocation->isHeadingAvailable() ? 1 : 0);

	return 1;
}

int GeolocationBinder::setAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_Number accuracy = luaL_checknumber(L, 2);
	geolocation->setAccuracy(accuracy);

	return 0;
}

int GeolocationBinder::getAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, geolocation->getAccuracy());

	return 1;
}


int GeolocationBinder::setThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_Number threshold = luaL_checknumber(L, 2);
	geolocation->setThreshold(threshold);

	return 0;
}

int GeolocationBinder::getThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, geolocation->getThreshold());

	return 1;
}

int GeolocationBinder::start(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->start();

	return 0;
}

int GeolocationBinder::stop(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stop();

	return 0;
}

int GeolocationBinder::startUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->startUpdatingLocation();

	return 0;
}
int GeolocationBinder::stopUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stopUpdatingLocation();

	return 0;
}

int GeolocationBinder::startUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->startUpdatingHeading();

	return 0;
}

int GeolocationBinder::stopUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->stopUpdatingHeading();

	return 0;
}
