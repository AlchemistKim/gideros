#include "geolocationbinder.h"
#include "stackchecker.h"
#include <eventdispatcher.h>

#import <UIKit/UIKit.h>
#import <CoreLocation/CoreLocation.h>

#include "luaapplication.h"
#include <application.h>

class Geolocation;

@interface GeolocationDelegate : NSObject<CLLocationManagerDelegate>
{
	Geolocation* geolocation;
}

@property(assign, nonatomic) Geolocation* geolocation;

- (id)initWithGeolocation:(Geolocation*)theGeolocation;

@end

class Geolocation : public EventDispatcher, public Ticker
{
public:
	Geolocation(lua_State* L) : L(L)
	{
		locationManager_ = [[CLLocationManager alloc] init];
		locationManager_.delegate = [[GeolocationDelegate alloc] initWithGeolocation:this];
		accuracy_ = 0;
	}

	virtual ~Geolocation()
	{
		[locationManager_.delegate release];
		locationManager_.delegate = nil;
		[locationManager_ release];
	}


	virtual void tick()
	{
		if (locationChanged_)
		{
			if (hasEventListener(LOCATION_UPDATE))
			{
				lua_pushlightuserdata(L, this);
				lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table
				
				lua_getfield(L, -1, "dispatchEvent");
				
				lua_pushvalue(L, -2); // create copy of geolocation
				
				lua_getfield(L, -1, "__updateLocationEvent");
				
				lua_pushnumber(L, latitude_);
				lua_setfield(L, -2, "latitude");
				lua_pushnumber(L, longitude_);
				lua_setfield(L, -2, "longitude");
				lua_pushnumber(L, altitude_);
				lua_setfield(L, -2, "altitude");
				
				lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)
				
				lua_pop(L, 1);	// pop "geolocation" table
			}
			
			locationChanged_ = false;
		}
		
		if (headingChanged_)
		{
			if (hasEventListener(HEADING_UPDATE))
			{
				lua_pushlightuserdata(L, this);
				lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table
				
				lua_getfield(L, -1, "dispatchEvent");
				
				lua_pushvalue(L, -2); // create copy of geolocation
				
				lua_getfield(L, -1, "__updateHeadingEvent");
				
				lua_pushnumber(L, magneticHeading_);
				lua_setfield(L, -2, "magneticHeading");
				
				lua_pushnumber(L, trueHeading_);
				lua_setfield(L, -2, "trueHeading");
				
				lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)
				
				lua_pop(L, 1);	// pop "geolocation" table
			}

			headingChanged_ = false;
		}
	}	
	
	BOOL isAvailable() const
	{
		BOOL locationServicesEnabledInstancePropertyAvailable = [locationManager_ respondsToSelector:@selector(locationServicesEnabled)]; // iOS 3.x
		BOOL locationServicesEnabledClassPropertyAvailable = [CLLocationManager respondsToSelector:@selector(locationServicesEnabled)]; // iOS 4.x
		
		if (locationServicesEnabledClassPropertyAvailable)
		{
			return [CLLocationManager locationServicesEnabled];
		}
		else if (locationServicesEnabledInstancePropertyAvailable)
		{
			return [locationManager_ locationServicesEnabled];
		}
		
		return NO;
	}
	
	
	BOOL isHeadingAvailable() const
	{
		BOOL headingInstancePropertyAvailable = [locationManager_ respondsToSelector:@selector(headingAvailable)]; // iOS 3.x
		BOOL headingClassPropertyAvailable = [CLLocationManager respondsToSelector:@selector(headingAvailable)]; // iOS 4.x
		
		if (headingClassPropertyAvailable)
		{
			return [CLLocationManager headingAvailable];
		} 
		else if (headingInstancePropertyAvailable) 
		{
			return [locationManager_ headingAvailable];
		}
		
		return NO;
	}
	
	void setAccuracy(double desiredAccuracy_num)
	{        
		accuracy_ = desiredAccuracy_num;
		
        CLLocationAccuracy desiredAccuracy = kCLLocationAccuracyBest;
        if (desiredAccuracy_num < 10)
            desiredAccuracy = kCLLocationAccuracyBest;
        else if (desiredAccuracy_num < 100)
            desiredAccuracy = kCLLocationAccuracyNearestTenMeters;
        else if (desiredAccuracy_num < 1000)
            desiredAccuracy = kCLLocationAccuracyHundredMeters;
        else if (desiredAccuracy_num < 3000)
            desiredAccuracy = kCLLocationAccuracyKilometer;
        else
            desiredAccuracy = kCLLocationAccuracyThreeKilometers;
        
        locationManager_.desiredAccuracy = desiredAccuracy;		
	}
	
	double getAccuracy() const
	{
		return accuracy_;
	}
	
	void setThreshold(double threshold)
	{
		locationManager_.distanceFilter = threshold;
	}

	double getThreshold() const
	{
		return locationManager_.distanceFilter;
	}
	
	void start()
	{
		startUpdatingLocation();
		startUpdatingHeading();
	}
	
	void stop()
	{
		stopUpdatingLocation();
		stopUpdatingHeading();
	}
	
	void startUpdatingLocation()
	{
		[locationManager_ startUpdatingLocation];
	}
	
	void stopUpdatingLocation()
	{	
		[locationManager_ stopUpdatingLocation];
	}
	
	void startUpdatingHeading()
	{
		[locationManager_ startUpdatingHeading];
	}
	
	void stopUpdatingHeading()
	{
		[locationManager_ stopUpdatingHeading];
	}
	
	void updateLocation(CLLocation* location)
	{
		latitude_ = location.coordinate.latitude;
		longitude_ = location.coordinate.longitude;
		altitude_ = location.altitude;
		locationChanged_ = true;
	}
	
	void updateHeading(CLHeading* heading)
	{
		magneticHeading_ = heading.magneticHeading;
		trueHeading_ = heading.trueHeading;
		headingChanged_ = true;
	}
	
	void error()
	{
		if (hasEventListener(ERROR))
		{
			lua_pushlightuserdata(L, this);
			lua_rawget(L, LUA_REGISTRYINDEX);	// push "geolocation" table
			
			lua_getfield(L, -1, "dispatchEvent");
			
			lua_pushvalue(L, -2); // create copy of geolocation
			
			lua_getfield(L, -1, "__errorEvent");
						
			lua_call(L, 2, 0); // call geolocation:dispatchEvent(event)
			
			lua_pop(L, 1);	// pop "geolocation" table
		}				
	}
	
	static Event::Type LOCATION_UPDATE;
	static Event::Type HEADING_UPDATE;
	static Event::Type ERROR;

private:
	lua_State* L;
	CLLocationManager* locationManager_;
	double accuracy_;

	double latitude_, longitude_, altitude_;
	bool locationChanged_;
	
	double magneticHeading_, trueHeading_;
	bool headingChanged_;
};

Event::Type Geolocation::LOCATION_UPDATE("locationUpdate");
Event::Type Geolocation::HEADING_UPDATE("headingUpdate");
Event::Type Geolocation::ERROR("error");

@implementation GeolocationDelegate

@synthesize geolocation;

-(id) initWithGeolocation:(Geolocation*)theGeolocation
{
	if ((self = [super init]))
	{
		geolocation = theGeolocation;
	}
	
	return self;
}

- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation
{
	geolocation->updateLocation(newLocation);
}

- (void)locationManager:(CLLocationManager *)manager didUpdateHeading:(CLHeading *)newHeading
{
	geolocation->updateHeading(newHeading);
}

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error
{
	geolocation->error();
}

- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)manager
{
	return YES;
}

@end

GeolocationBinder::GeolocationBinder(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::GeolocationBinder", 0);

	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");

	lua_pushcfunction(L, loader);
	lua_setfield(L, -2, "geolocation");

	lua_pop(L, 2);
}


int GeolocationBinder::loader(lua_State* L)
{
	StackChecker checker(L, "GeolocationBinder::loader", 1);

	Binder binder(L);

	static const luaL_Reg functionList[] = {
		{"isAvailable", isAvailable},
		{"isHeadingAvailable", isHeadingAvailable},
		{"setAccuracy", setAccuracy},
		{"getAccuracy", getAccuracy},
		{"setThreshold", setThreshold},
		{"getThreshold", getThreshold},
		{"start", start},
		{"stop", stop},
		{"startUpdatingLocation", startUpdatingLocation},
		{"stopUpdatingLocation", stopUpdatingLocation},
		{"startUpdatingHeading", startUpdatingHeading},
		{"stopUpdatingHeading", stopUpdatingHeading},
		{NULL, NULL},
	};

	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));

	binder.createClass("Geolocation", "EventDispatcher", NULL, destruct, functionList);
		
	Geolocation* geolocation = new Geolocation(L);
	binder.pushInstance("Geolocation", geolocation);
		
	application->addTicker(geolocation);
	
	lua_getglobal(L, "Event");

	lua_pushstring(L, Geolocation::LOCATION_UPDATE.type());
	lua_setfield(L, -2, "LOCATION_UPDATE");

	lua_pushstring(L, Geolocation::HEADING_UPDATE.type());
	lua_setfield(L, -2, "HEADING_UPDATE");

	lua_getfield(L, -1, "new");
	lua_remove(L, -2);				// remove global "Event"
	
	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::LOCATION_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateLocationEvent");
	
	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::HEADING_UPDATE.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__updateHeadingEvent");

	lua_pushvalue(L, -1);	// duplicate Event.new
	lua_pushstring(L, Geolocation::ERROR.type());
	lua_call(L, 1, 1); // call Event.new
	lua_setfield(L, -3, "__errorEvent");
		
	lua_pop(L, 1);		// pop Event.new	
	
	lua_pushlightuserdata(L, geolocation);
	lua_pushvalue(L, -2);
	lua_rawset(L, LUA_REGISTRYINDEX);

	lua_setglobal(L, "geolocation");

	lua_getglobal(L, "geolocation");
	return 1;	
}

int GeolocationBinder::destruct(lua_State* L)
{
	LuaApplication* application = static_cast<LuaApplication*>(lua_getdata(L));
	
	void* ptr = *(void**)lua_touserdata(L, 1);
	Geolocation* geolocation = static_cast<Geolocation*>(ptr);
	geolocation->unref();

	application->removeTicker(geolocation);

	
	return 0;
}

int GeolocationBinder::isAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushboolean(L, geolocation->isAvailable());
	return 1;
}

int GeolocationBinder::isHeadingAvailable(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	lua_pushboolean(L, geolocation->isHeadingAvailable());
	
	return 1;
}

int GeolocationBinder::setAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_Number accuracy = lua_tonumber(L, 2);
	geolocation->setAccuracy(accuracy);
	
	return 0;
}

int GeolocationBinder::getAccuracy(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	lua_pushnumber(L, geolocation->getAccuracy());
	
	return 1;
}

int GeolocationBinder::setThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	lua_Number threshold = lua_tonumber(L, 2);
	geolocation->setThreshold(threshold);
	
	return 0;
}

int GeolocationBinder::getThreshold(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	lua_pushnumber(L, geolocation->getThreshold());

	return 1;
}

int GeolocationBinder::start(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));

	geolocation->start();
	
	return 0;
}
int GeolocationBinder::stop(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	geolocation->stop();

	return 0;
}
int GeolocationBinder::startUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	geolocation->startUpdatingLocation();

	return 0;
}
int GeolocationBinder::stopUpdatingLocation(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	geolocation->stopUpdatingLocation();

	return 0;
}
int GeolocationBinder::startUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	geolocation->startUpdatingHeading();

	return 0;
}
int GeolocationBinder::stopUpdatingHeading(lua_State* L)
{
	Binder binder(L);
	Geolocation* geolocation = static_cast<Geolocation*>(binder.getInstance("Geolocation", 1));
	
	geolocation->stopUpdatingHeading();

	return 0;
}
