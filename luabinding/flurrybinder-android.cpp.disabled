#include "flurrybinder.h"
#include "stackchecker.h"

FlurryBinder::FlurryBinder(lua_State* L)
{
	StackChecker checker(L, "FlurryBinder::FlurryBinder", 0);

	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");

	lua_pushcfunction(L, loader);
	lua_setfield(L, -2, "flurry");

	lua_pop(L, 2);
}

int FlurryBinder::loader(lua_State* L)
{
	StackChecker checker(L, "FlurryBinder::loader", 1);

	Binder binder(L);

	lua_newtable(L);

	lua_pushcfunction(L, isAvailable);
	lua_setfield(L, -2, "isAvailable");
	lua_pushcfunction(L, startSession);
	lua_setfield(L, -2, "startSession");
	lua_pushcfunction(L, logEvent);
	lua_setfield(L, -2, "logEvent");
	lua_pushcfunction(L, endTimedEvent);
	lua_setfield(L, -2, "endTimedEvent");

	lua_pushvalue(L, -1);
	lua_setglobal(L, "flurry");

	return 1;
}

int FlurryBinder::isAvailable(lua_State* L)
{
	lua_pushboolean(L, 0);
	return 1;
}

int FlurryBinder::startSession(lua_State* L)
{
	return 0;
}

int FlurryBinder::logEvent(lua_State* L)
{
	return 0;
}

int FlurryBinder::endTimedEvent(lua_State* L)
{
	return 0;
}
