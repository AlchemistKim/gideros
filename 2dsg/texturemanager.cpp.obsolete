#include "texturemanager.h"
#include <string.h>
#include <pystring.h>
#include "gstatus.h"
#include "dib.h"
#include "ogl.h"
#include <algorithm>
#include <gfile.h>
#include <gfile_p.h>
#include "giderosexception.h"

TextureManager::TextureManager(Application* application) :
	application_(application),
	totalMemory_(0)
{

}

TextureManager::~TextureManager()
{
    tick();
    tick();
}

TextureData* TextureManager::createTextureFromFile(const char* filename, const TextureParameters& parameters)
{
	TextureCacheKey key(filename, parameters);

	std::map<TextureCacheKey, TextureData*>::iterator iter = textureCache_.find(key);

	if (iter != textureCache_.end())
	{
		iter->second->refcount++;
		debuglog("Increasing refcount of %s. New refcount is %d.", filename, iter->second->refcount);
		return iter->second;
	}

	const char* dot = strrchr(filename, '.');

	if (dot == 0)
		throw GiderosException(GStatus(6005, filename));		// Error #6005: %s: Image format is not supported.

	std::string suffix = pystring::lower(dot + 1);

	if (suffix != "png" && suffix != "jpg" && suffix == "jpeg")
		throw GiderosException(GStatus(6005, dot + 1));		// Error #6005: %s: Image format is not supported.

	// Note: if a constructor finishes by throwing an exception, the memory associated with the object itself is cleaned up — there is no memory leak.
	Dib* dib = new Dib(	application_,
						filename,
						true,
						true,
						parameters.maketransparent,
						parameters.transparentcolor);

	TextureData* texture = new TextureData;

	texture->refcount = 1;
	texture->id = 0;
	texture->dib = dib;
	texture->filename = filename;
	texture->parameters = parameters;
	texture->width = dib->originalWidth();
	texture->height = dib->originalHeight();
	texture->exwidth = dib->width();
	texture->exheight = dib->height();
	texture->baseWidth = dib->baseOriginalWidth();
	texture->baseHeight = dib->baseOriginalHeight();
	texture->baseExWidth = dib->baseWidth();
	texture->baseExHeight = dib->baseHeight();
	//texture->scalex = (float)dib->baseOriginalWidth() / (float)dib->originalWidth();
	//texture->scaley = (float)dib->baseOriginalHeight() / (float)dib->originalHeight();
	texture->memory = (texture->exwidth * texture->exheight) * (parameters.grayscale ? 1 : 4);

	genList_.push_back(texture);

	if (getFileType(filename) == eResourceFile)
		textureCache_[key] = texture;

	totalMemory_ += texture->memory;
	debuglog("Inserting %s to the texture cache. Total memory is %g KB.", texture->filename.c_str(), totalMemory_ / 1024.0);

	return texture;
}


TextureData* TextureManager::createTextureFromDib(const Dib& d, const TextureParameters& parameters)
{
	Dib* dib = new Dib(d);

	TextureData* texture = new TextureData;

	texture->refcount = 1;
	texture->id = 0;
	texture->dib = dib;
	texture->filename = "*unnamed*";
	texture->parameters = parameters;
	texture->width = dib->originalWidth();
	texture->height = dib->originalHeight();
	texture->exwidth = dib->width();
	texture->exheight = dib->height();
	texture->baseWidth = dib->baseOriginalWidth();
	texture->baseHeight = dib->baseOriginalHeight();
	texture->baseExWidth = dib->baseWidth();
	texture->baseExHeight = dib->baseHeight();
	//texture->scalex = (float)dib->baseOriginalWidth() / (float)dib->originalWidth();
	//texture->scaley = (float)dib->baseOriginalHeight() / (float)dib->originalHeight();
	texture->memory = (texture->exwidth * texture->exheight) * (parameters.grayscale ? 1 : 4);

	genList_.push_back(texture);

	totalMemory_ += texture->memory;
	debuglog("Inserting %s to the texture cache. Total memory is %g KB.", texture->filename.c_str(), totalMemory_ / 1024.0);

	return texture;
}


void TextureManager::destroyTexture(TextureData* texture)
{
	bool del = false;

	TextureCacheKey key(texture->filename, texture->parameters);

	std::map<TextureCacheKey, TextureData*>::iterator iter = textureCache_.find(key);

	if (iter != textureCache_.end())
	{
		if (--texture->refcount == 0)
		{
			textureCache_.erase(iter);
			del = true;
		}
		else
			debuglog("Decreasing refcount of %s. New refcount is %d.", texture->filename.c_str(), iter->second->refcount);
	}
	else
		del = true;

	if (del)
	{
		if (texture->dib)
			delete texture->dib;

		if (texture->id)
			deleteList_.push_back(texture->id);

		genList_.erase(std::remove(genList_.begin(), genList_.end(), texture), genList_.end());

		totalMemory_ -= texture->memory;
		debuglog("Deleting %s from the texture memory. Total memory is %g KB.", texture->filename.c_str(), totalMemory_ / 1024.0);

		delete texture;
	}
}

void TextureManager::tick()
{
	oglEnable(GL_TEXTURE_2D);

	for (size_t i = 0; i < deleteList_.size(); ++i)
		glDeleteTextures(1, &deleteList_[i]);
	deleteList_.clear();

	for (size_t i = 0; i < genList_.size(); ++i)
	{
		glGenTextures(1, &genList_[i]->id);

		oglBindTexture(GL_TEXTURE_2D, genList_[i]->id);

		if (genList_[i]->parameters.filter == eNearest)
		{
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		}
		else
		{
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		}

		if (genList_[i]->parameters.wrap == eClamp)
		{
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
		}
		else
		{
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		}

		Dib* dib = genList_[i]->dib;
		int width =  dib->width();
		int height = dib->height();

		if (genList_[i]->parameters.grayscale)
		{
//			unsigned char* data = new unsigned char[width * height];

			for (unsigned y = 0; y < height; ++y)
				for (unsigned x = 0; x < width; ++x)
				{
                    unsigned char rgba[4];
                    dib->getPixel(x, y, rgba);
                    unsigned char a = rgba[0];
                    rgba[0] = rgba[1] = rgba[2] = 255;
                    rgba[3] = 255 - a;
                    dib->setPixel(x, y, rgba);
                    //data[x + y * width] = 255 - rgb[0];
				}

#ifndef PREMULTIPLIED_ALPHA
#error PREMULTIPLIED_ALPHA is not defined
#endif

#if PREMULTIPLIED_ALPHA
            dib->premultiplyAlpha();
#endif
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, dib->data());
//			glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, width, height, 0, GL_ALPHA, GL_UNSIGNED_BYTE, data);

//			delete [] data;
		}
		else
		{
#ifndef PREMULTIPLIED_ALPHA
#error PREMULTIPLIED_ALPHA is not defined
#endif

#if PREMULTIPLIED_ALPHA
            dib->premultiplyAlpha();
#endif
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, dib->data());
		}

		delete genList_[i]->dib;
		genList_[i]->dib = NULL;
	}
	genList_.clear();
}
