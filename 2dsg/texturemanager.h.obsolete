#ifndef TEXTUREMANAGER_H
#define TEXTUREMANAGER_H

class Application;
class Dib;

#include <vector>
#include <set>
#include <map>
#include <string>

enum Filter
{
	eNearest,
	eLinear,
};

enum Wrap
{
	eClamp,
	eRepeat,
};

struct TextureParameters
{
	TextureParameters()
	{
		filter = eNearest;
		wrap = eClamp;
		maketransparent = false;
		transparentcolor = 0x00000000;
		grayscale = false;
	}

	Filter filter;
	Wrap wrap;
	bool maketransparent;
	unsigned int transparentcolor;
	bool grayscale;

	inline friend bool operator < (const TextureParameters& p0, const TextureParameters& p1)
	{
		if (p0.filter < p1.filter)
			return true;
		if (p0.filter > p1.filter)
			return false;
		if (p0.wrap < p1.wrap)
			return true;
		if (p0.wrap > p1.wrap)
			return false;
		if (p0.maketransparent < p1.maketransparent)
			return true;
		if (p0.maketransparent > p1.maketransparent)
			return false;
		if (p0.transparentcolor < p1.transparentcolor)
			return true;
		return false;
	}
};

struct TextureData
{
	TextureData() :
		refcount(1),
		id(0),
		dib(NULL)
	{

	}

	unsigned int refcount;
	unsigned int id;
	Dib* dib;
	std::string filename;
	TextureParameters parameters;
	int width, height;
	int exwidth, exheight;
	int baseWidth, baseHeight;
	int baseExWidth, baseExHeight;
//	float scalex, scaley;
	int memory;
};


class TextureManager
{
public:
	TextureManager(Application* application);
	~TextureManager();

	TextureData* createTextureFromFile(const char* filename, const TextureParameters& parameters);
	TextureData* createTextureFromDib(const Dib& dib, const TextureParameters& parameters);
	void destroyTexture(TextureData* texture);
	void tick();

private:
	Application* application_;

	std::vector<TextureData*> genList_;
	std::vector<unsigned int> deleteList_;

	struct TextureCacheKey
	{
		TextureCacheKey(const std::string& filename, const TextureParameters& parameters) :
			filename(filename),
			parameters(parameters)
		{

		}

		std::string filename;
		TextureParameters parameters;

		inline friend bool operator < (const TextureCacheKey& k0, const TextureCacheKey& k1)
		{
			if (k0.filename < k1.filename)
				return true;
			if (k0.filename > k1.filename)
				return false;
			if (k0.parameters < k1.parameters)
				return true;
			return false;
		}
	};

	std::pair<int, int> p;

	std::map<TextureCacheKey, TextureData*> textureCache_;

	int totalMemory_;
};


#endif
