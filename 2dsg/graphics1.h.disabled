#ifndef GRAPHICS_H
#define GRAPHICS_H

#include <vector>
#include "point.h"

class GraphicsItem;

class Graphics
{
public:
	Graphics();
	~Graphics();

	void beginFill(float r, float g, float b, float a = 1.f);
	void beginFill(unsigned int color, float alpha = 1.f);
	void endFill();

	void lineStyle(float thickness, float r, float g, float b, float a = 1.f);
	void lineStyle(float thickness, unsigned int color, float alpha = 1.f);

	void moveTo(float x, float y);
	void lineTo(float x, float y);

	void drawRect(float x, float y, float width, float height);

	void clear();

	void draw();

private:
	friend class Sprite;

	void bounds(Point2f* min, Point2f* max) const;

	std::vector<GraphicsItem*> items_;
	std::vector<GraphicsItem*> lineItems_;
	float penx_, peny_;

	std::vector<std::vector<Point2f> > contours_;
	bool fill_;
	float fillr_, fillg_, fillb_, filla_;

	float liner_, lineg_, lineb_, linea_;
	float thickness_;

	void createPolygon();

	Point2f min_, max_;
	void updateBoundingBox(GraphicsItem* item);

	bool isDirty() const
	{
		return isDirty_;
	}

	void setClean() const
	{
		isDirty_ = false;
	}

	mutable bool isDirty_;
};

#endif
