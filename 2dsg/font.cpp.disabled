#include "font.h"
#include "dib.h"
#include "ogl.h"
#include "color.h"
#include "graphicsbase.h"
#include <sstream>
#include <gfile.h>
#include <application.h>

#include "embeddedfont.inc"

Font::Font(Application* application)
{
	std::stringstream stream(fontGlymp);

	int doMipmaps_;
	stream >> doMipmaps_;

	while (1)
	{
		TextureGlyph glyph;
		int chr;
		stream >> chr;

		if (stream.eof())
			break;

		glyph.chr = chr;
		stream >> glyph.x >> glyph.y;
		stream >> glyph.width >> glyph.height;
		stream >> glyph.left >> glyph.top;
		stream >> glyph.advancex >> glyph.advancey;

		textureGlyphs_[chr] = glyph;
	}

	scale_ = 1;
	delta_ = 1;

	oglEnable(GL_TEXTURE_2D);

	texwidth_ = 128;
	texheight_ = 128;

	glGenTextures(1, &textureid_);

	oglBindTexture(GL_TEXTURE_2D, textureid_);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, texwidth_, texheight_, 0, GL_ALPHA, GL_UNSIGNED_BYTE, fontImage);
}

Font::Font(Application* application,
		   const char* glympfile, const char* imagefile, bool filtering) :
	textureid_(0),
	texwidth_(0),
	texheight_(0)
{
	// glympfile and imagefile with suffix
	std::string glympfilex;
	std::string imagefilex;

	const char* suffix = application->getImageSuffix();
	if (suffix)
	{
		const char* ext;

		ext = strrchr(glympfile, '.');
		if (ext)
			glympfilex = std::string(glympfile, ext - glympfile) + suffix + ext;

		ext = strrchr(imagefile, '.');
		if (ext)
			imagefilex = std::string(imagefile, ext - imagefile) + suffix + ext;

		// check if these files exists
		G_FILE* f;

		f = g_fopen(glympfilex.c_str(), "r");
		if (f == NULL)
			glympfilex.clear();
		else
			g_fclose(f);

		f = g_fopen(imagefilex.c_str(), "r");
		if (f == NULL)
			imagefilex.clear();
		else
			g_fclose(f);
	}

	bool base;

	int scale1 = readTextureGlyphs(glympfile, textureGlyphs_);
	if (!glympfilex.empty() && !imagefilex.empty())
	{
		int scale2 = readTextureGlyphs(glympfilex.c_str(), textureGlyphs_);
		scale_ = (double)scale1 / (double)scale2;
		base = false;
	}
	else
	{
		scale_ = 1;
		base = true;
	}

	Dib dib(application, imagefile, true, true, 0xffffffff);

	texwidth_ = dib.width();
	texheight_ = dib.height();

	unsigned char* data = new unsigned char[texwidth_ * texheight_];

	for (unsigned y = 0; y < texheight_; ++y)
		for (unsigned x = 0; x < texwidth_; ++x)
		{
			unsigned char rgb[4];
			dib.getPixel(x, y, rgb);
			data[x + y * texwidth_] = 255 - rgb[0];
		}

	oglEnable(GL_TEXTURE_2D);

	glGenTextures(1, &textureid_);

	oglBindTexture(GL_TEXTURE_2D, textureid_);

	if (filtering)
	{
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
/*		#ifdef GL_GENERATE_MIPMAP
		glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
		#endif */
	}
	else
	{
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	}

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, texwidth_, texheight_, 0, GL_ALPHA, GL_UNSIGNED_BYTE, data);

	//glDisable(GL_TEXTURE_2D);

	delete [] data;

	if (base)
	{
		texwidth_ = dib.baseWidth();
		texheight_ = dib.baseHeight();
		delta_ = (float)dib.baseWidth() / (float)dib.width();
	}
	else
		delta_ = 1;
}

#if 0
void Font::drawText(const char* text, float r, float g, float b, float letterSpacing) const
{
	const float delta = 2;

	oglEnable(GL_TEXTURE_2D);
	oglBindTexture(GL_TEXTURE_2D, textureid_);

	float x = 0, y = 0;
	while (*text)
	{
		TextureGlyph textureGlyph = textureGlyphs_[*text];

		int width = textureGlyph.width;
		int height = textureGlyph.height;

		float u0 = (textureGlyph.x - delta) / (float)texwidth_;
		float v0 = (textureGlyph.y - delta) / (float)texheight_;

		float u1 = (textureGlyph.x + width + delta) / (float)texwidth_;
		float v1 = (textureGlyph.y + height + delta) / (float)texheight_;

		glPushMatrix();

		glPushColor();
		glMultColor(r, g, b, 1.f);

		glTranslatef(x, y, 0);
		glTranslatef(textureGlyph.left, -textureGlyph.top, 0);

		float vertices[] = {-delta, -delta,
							-delta, height + delta,
							width + delta, -delta,
							width + delta, height + delta};

		float texcoords[] = {u0, v0,
							u0, v1,
							u1, v0,
							u1, v1};

		glVertexPointer(2, GL_FLOAT, 0, vertices);
		oglEnableClientState(GL_VERTEX_ARRAY);

		glTexCoordPointer(2, GL_FLOAT, 0, texcoords);
		oglEnableClientState(GL_TEXTURE_COORD_ARRAY);

		oglDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

		oglDisableClientState(GL_VERTEX_ARRAY);
		oglDisableClientState(GL_TEXTURE_COORD_ARRAY);

		//glBegin(GL_QUADS);
		//	glTexCoord2f(u0, v0);
		//	glVertex2f(-delta, -delta);

		//	glTexCoord2f(u0, v1);
		//	glVertex2f(-delta, height + delta);

		//	glTexCoord2f(u1, v1);
		//	glVertex2f(width + delta, height + delta);

		//	glTexCoord2f(u1, v0);
		//	glVertex2f(width + delta, -delta);
		//glEnd();

		x += textureGlyph.advancex / 64.f;
		y += textureGlyph.advancey / 64.f; // not useful for now
		x += letterSpacing;

		glPopColor();

		glPopMatrix();

		++text;
	}

	//glDisable(GL_TEXTURE_2D);
}
#endif

void Font::drawText(GraphicsBase* graphicsBase, const wchar_t* text, float r, float g, float b, float letterSpacing) const
{
	if (*text == 0 || textureGlyphs_.empty())
	{
		graphicsBase->clear();
		return;
	}

	int size = wcslen(text);

	graphicsBase->textureid = textureid_;
	graphicsBase->setColor(r, g, b, 1);
	graphicsBase->vertices.resize(size * 4);
	graphicsBase->texcoords.resize(size * 4);
	graphicsBase->indices.resize(size * 6);

	float x = 0, y = 0;
	for (int i = 0; i < size; ++i)
	{
		std::map<wchar_t, TextureGlyph>::const_iterator iter = textureGlyphs_.find(text[i]);

		const TextureGlyph& textureGlyph =
				(iter == textureGlyphs_.end()) ? textureGlyphs_.begin()->second : iter->second;

		int width = textureGlyph.width;
		int height = textureGlyph.height;
		int left = textureGlyph.left;
		int top = textureGlyph.top;

		float x0 = -delta_ + x + left;
		float y0 = -delta_ + y - top;

		float x1 = width + delta_ + x + left;
		float y1 = height + delta_ + y - top;

		float u0 = (textureGlyph.x - delta_) / (float)texwidth_;
		float v0 = (textureGlyph.y - delta_) / (float)texheight_;

		float u1 = (textureGlyph.x + width + delta_) / (float)texwidth_;
		float v1 = (textureGlyph.y + height + delta_) / (float)texheight_;

		graphicsBase->vertices[i * 4 + 0] = Point2f(x0 * scale_, y0 * scale_);
		graphicsBase->vertices[i * 4 + 1] = Point2f(x1 * scale_, y0 * scale_);
		graphicsBase->vertices[i * 4 + 2] = Point2f(x1 * scale_, y1 * scale_);
		graphicsBase->vertices[i * 4 + 3] = Point2f(x0 * scale_, y1 * scale_);

		graphicsBase->texcoords[i * 4 + 0] = Point2f(u0, v0);
		graphicsBase->texcoords[i * 4 + 1] = Point2f(u1, v0);
		graphicsBase->texcoords[i * 4 + 2] = Point2f(u1, v1);
		graphicsBase->texcoords[i * 4 + 3] = Point2f(u0, v1);

		graphicsBase->indices[i * 6 + 0] = i * 4 + 0;
		graphicsBase->indices[i * 6 + 1] = i * 4 + 1;
		graphicsBase->indices[i * 6 + 2] = i * 4 + 2;
		graphicsBase->indices[i * 6 + 3] = i * 4 + 0;
		graphicsBase->indices[i * 6 + 4] = i * 4 + 2;
		graphicsBase->indices[i * 6 + 5] = i * 4 + 3;

		x += textureGlyph.advancex / 64.f;
		y += textureGlyph.advancey / 64.f; // not useful for now
		x += letterSpacing / scale_;
	}
}

int Font::readTextureGlyphs(const char* file, std::map<wchar_t, TextureGlyph>& textureGlyphs_)
{
	G_FILE* fis = g_fopen(file, "rt");

	if (!fis)
	{
		throw GiderosException(GStatus(6000, file));	// Error #6000: %s: No such file or directory. 
		return 0;
	}

	int result = 0;

	textureGlyphs_.clear();

	int doMipmaps_;
	g_fscanf(fis, "%d", &doMipmaps_);
	while (1)
	{
		TextureGlyph glyph;
		int chr;
		g_fscanf(fis, "%d", &chr);

		if (g_feof(fis))
			break;

		glyph.chr = chr;
		g_fscanf(fis, "%d %d", &glyph.x, &glyph.y);
		g_fscanf(fis, "%d %d", &glyph.width, &glyph.height);
		g_fscanf(fis, "%d %d", &glyph.left, &glyph.top);
		g_fscanf(fis, "%d %d", &glyph.advancex, &glyph.advancey);

		result += glyph.advancex;

		textureGlyphs_[chr] = glyph;
	}

	g_fclose(fis);

	return result;
}

Font::~Font()
{
	if (textureid_ && texwidth_ && texheight_)
	{
		glDeleteTextures(1, &textureid_);
		oglBindTexture(GL_TEXTURE_2D, 0);
	}
}

void Font::bounds(const wchar_t* text, float letterSpacing, float* pminx, float* pminy, float* pmaxx, float* pmaxy) const
{
	float minx = 1e30f;
	float miny = 1e30f;
	float maxx = -1e30f;
	float maxy = -1e30f;

	float x = 0, y = 0;

	if (!textureGlyphs_.empty())
		while (*text)
		{
			std::map<wchar_t, TextureGlyph>::const_iterator iter = textureGlyphs_.find(*text);

			const TextureGlyph& textureGlyph =
					(iter == textureGlyphs_.end()) ? textureGlyphs_.begin()->second : iter->second;

			int width = textureGlyph.width;
			int height = textureGlyph.height;
			int left = textureGlyph.left;
			int top = textureGlyph.top;

			float x0 = (x + left) * scale_;
			float x1 = (x + left + width) * scale_;
			float y0 = (y - top) * scale_;
			float y1 = (y - top + height) * scale_;

			minx = std::min(minx, x0);
			minx = std::min(minx, x1);
			miny = std::min(miny, y0);
			miny = std::min(miny, y1);

			maxx = std::max(maxx, x0);
			maxx = std::max(maxx, x1);
			maxy = std::max(maxy, y0);
			maxy = std::max(maxy, y1);

			x += textureGlyph.advancex / 64.f;
			y += textureGlyph.advancey / 64.f; // not useful for now
			x += letterSpacing / scale_;

			++text;
		}

	if (pminx)
		*pminx = minx;

	if (pminy)
		*pminy = miny;
	
	if (pmaxx)
		*pmaxx = maxx;
	
	if (pmaxy)
		*pmaxy = maxy;
}
