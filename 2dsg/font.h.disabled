#ifndef FONT_H
#define FONT_H

#include "refptr.h"
#include <map>

class GraphicsBase;
class Application;

class Font : public Referenced
{
public:
	Font(Application* application);
	// can throw GiderosException
	Font(Application* application,
		 const char* glympfile, const char* imagefile, bool filtering = false);
	virtual ~Font();
#if 0
	void drawText(const char* text, float r, float g, float b, float letterSpacing) const;
#endif
	void drawText(GraphicsBase* graphicsBase, const wchar_t* text, float r, float g, float b, float letterSpacing) const;
	void bounds(const wchar_t* text, float letterSpacing, float* pminx, float* pminy, float* pmaxx, float* pmaxy) const;

private:
	struct TextureGlyph
	{
		wchar_t chr;
		int x, y;
		int width, height;
		int left, top;
		int advancex, advancey;
	};

	std::map<wchar_t, TextureGlyph> textureGlyphs_;
	unsigned int textureid_;
	unsigned int texwidth_;
	unsigned int texheight_;

	static int readTextureGlyphs(const char* filename, std::map<wchar_t, TextureGlyph>& textureGlyphs_);
	float scale_;
	float delta_;
};


#endif
