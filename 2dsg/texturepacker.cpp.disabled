#include "texturepacker.h"
#include <assert.h>
#include <vector>
#include <algorithm>

namespace texturepacker {

static unsigned int nextpow2(unsigned int v)
{
	v--;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	v++;

	return v;
}

class Texture
{
public:
	Texture()
	{

	}

	Texture(int id, int width, int height) :
		id(id),
		width(width),
		height(height)
	{

	}

	int id;
	int x, y;
	int width, height;
};

struct LessTextureWidth
{
public:
	bool operator()(const Texture& t0, const Texture& t1) const
	{
		return (t0.width + t0.height) > (t1.width + t1.height);
	}
};

struct LessTextureId
{
public:
	bool operator()(const Texture& t0, const Texture& t1) const
	{
		return t0.id < t1.id;
	}
};


class SkyLine
{
public:
	SkyLine(int width) : width_(width)
	{
		positions_.push_back(-1);
		heights_.push_back(0);

		positions_.push_back(width - 1);
		heights_.push_back(0);
	}

	int maxElement(int start, int width)
	{
		int index0 = std::lower_bound(positions_.begin(), positions_.end(), start) - positions_.begin();
		int index1 = std::lower_bound(positions_.begin(), positions_.end(), start + width - 1) - positions_.begin();

		return *std::max_element(heights_.begin() + index0, heights_.begin() + index1 + 1);
	}

	void addBlock(int start, int width, int height)
	{
		if (width <= 0)
			return;

		start--;

		int index0 = std::lower_bound(positions_.begin(), positions_.end(), start) - positions_.begin();
		int index1 = std::lower_bound(positions_.begin(), positions_.end(), start + width + 1) - positions_.begin();

		if (index1 == index0)
		{
			positions_.insert(positions_.begin() + index0, positions_[index0]); // duplicate elements at index0
			heights_.insert(heights_.begin() + index0, heights_[index0]);
		}
		else
		{
			positions_.erase(positions_.begin() + index0 + 1, positions_.begin() + index1);
			heights_.erase(heights_.begin() + index0 + 1, heights_.begin() + index1);
		}

		positions_[index0] = start;

		positions_.insert(positions_.begin() + index0 + 1, start + width);
		heights_.insert(heights_.begin() + index0 + 1, height);
	}

	void lowest(int width, int* minx, int* minheight)
	{
		int low = 0x7FFFFFFF;		// INT_MAX
		int index = -1;
		for (int i = 0; i < size() - 1; ++i)
		{
			int p = positions()[i] + 1;
			
			if (p + width > width_)
				break;
			
			int height = maxElement(p, width);
			
			if (height < low)
			{
				low = height;
				index = p;
			}
		}
		
		*minx = index;
		*minheight = low;
	}
	
	const std::vector<int>& positions() const
	{
		return positions_;
	}

	const std::vector<int>& heights() const
	{
		return heights_;
	}

	int size() const
	{
		return (int)positions_.size();
	}

private:
	int width_;
	std::vector<int> positions_;
	std::vector<int> heights_;
};




class MyTexturePacker : public TexturePacker
{
public:
	MyTexturePacker() :
		textureindex_(0)
	{

	}

	virtual void setTextureCount(int tcount)
	{
		textures_.resize(tcount);
		textureindex_ = 0;
	}

	virtual void addTexture(int width, int height)
	{
		textures_[textureindex_] = Texture(textureindex_, width, height);
		textureindex_++;
	}

/*
	int packHelper(int width)
	{
		skyline_.resize(width);
		std::fill(skyline_.begin(), skyline_.end(), 0);

		for (std::size_t i = 0; i < textures_.size(); ++i)
		{
			int minx = 0;
			int minheight = *std::max_element(skyline_.begin(), skyline_.begin() + textures_[i].width);

			for (int x = 0; x < width - textures_[i].width; ++x)
			{
				int height = *std::max_element(skyline_.begin() + x, skyline_.begin() + x + textures_[i].width);
				if (height < minheight)
				{
					minheight = height;
					minx = x;
				}
			}

			textures_[i].x = minx;
			textures_[i].y = minheight;

			std::fill(skyline_.begin() + minx, skyline_.begin() + minx + textures_[i].width, minheight + textures_[i].height);
		}


		return nextpow2(*std::max_element(skyline_.begin(), skyline_.end()));
	} */

	int packHelper(int width)
	{
		SkyLine skyline(width);

		for (std::size_t i = 0; i < textures_.size(); ++i)
		{
			int minx;
			int minheight;
			skyline.lowest(textures_[i].width, &minx, &minheight);

			textures_[i].x = minx;
			textures_[i].y = minheight;

			skyline.addBlock(minx, textures_[i].width, minheight + textures_[i].height);
		}

		int minx;
		int minheight;
		skyline.lowest(width, &minx, &minheight);

		return nextpow2(minheight);
	}


	virtual void packTextures(int* width,int* height, int border, bool forceSquare = false)
	{
		for (std::size_t i = 0; i < textures_.size(); ++i)
		{
			textures_[i].width += border * 2;
			textures_[i].height += border * 2;
		}

		// sort textures by width
		std::sort(textures_.begin(), textures_.end(), LessTextureWidth());

		int maxwidth = 0;
		int totalwidth = 0;
		for (std::size_t i = 0; i < textures_.size(); ++i)
		{
			maxwidth = std::max(maxwidth, textures_[i].width);
			totalwidth += textures_[i].width;
		}

		maxwidth = nextpow2(maxwidth);
		totalwidth = nextpow2(totalwidth);

		int minarea = 0x7fffffff;
		int minwidth;

		for (int i = 0; totalwidth >= (maxwidth << i); ++i)
		{
			int width = maxwidth << i;
			int height = packHelper(width);

			if (forceSquare == true)
			{
				int size = std::max(width, height);

				width = size;
				height = size;
			}

			int aspect = std::max(width, height) / std::min(width, height);

			int area = width * height + aspect;

			if (area < minarea)
			{
				minarea = area;
				minwidth = width;
			}
		}

		*width = minwidth;
		*height = packHelper(*width);

		if (forceSquare == true)
		{
			int size = std::max(*width, *height);

			*width = size;
			*height = size;
		}

		std::sort(textures_.begin(), textures_.end(), LessTextureId());

		for (std::size_t i = 0; i < textures_.size(); ++i)
		{
			textures_[i].width -= 2 * border;
			textures_[i].height -= 2 * border;
			textures_[i].x += border;
			textures_[i].y += border;
		}
	}

	virtual void getTextureLocation(int index, int* x,int* y,int* width, int* height)
	{
		*x = textures_[index].x;
		*y = textures_[index].y;
		*width = textures_[index].width;
		*height = textures_[index].height;
	}

private:
	std::vector<Texture> textures_;
	int textureindex_;
	std::vector<int> skyline_;
};

}

TexturePacker* createTexturePacker(void)
{
	texturepacker::MyTexturePacker* m = new texturepacker::MyTexturePacker;
	return static_cast<TexturePacker*>(m);
}

void releaseTexturePacker(TexturePacker *tp)
{
	texturepacker::MyTexturePacker* m = static_cast<texturepacker::MyTexturePacker*>(tp);
	delete m;
}
