#include "graphics2.h"


#include "color.h"

#include "ogl.h"
#include <cmath>

extern "C"
{
#include "gpc.h"
}

class GraphicsItem2
{
public:
	virtual ~GraphicsItem2() {}
	virtual void draw() = 0;
};


static GraphicsBase* createGraphicsBase(const gpc_tristrip& tristrip)
{
	GraphicsBase* result = new GraphicsBase;

	for (int i = 0; i < tristrip.num_strips; ++i)
	{
		int start = result->vertices.size();
		for (int j = 0; j < tristrip.strip[i].num_vertices; ++j)
		{
			float x = tristrip.strip[i].vertex[j].x;
			float y = tristrip.strip[i].vertex[j].y;

			result->vertices.push_back(Point2f(x, y));
		}

		for (int j = 2; j < tristrip.strip[i].num_vertices; ++j)
		{
			int i0 = j - 2 + start;
			int i1 = j - 1 + start;
			int i2 = j + start;

			if ((j % 2) == 1)
				std::swap(i0, i1);

			result->indices.push_back(i0);
			result->indices.push_back(i1);
			result->indices.push_back(i2);
		}
	}

	return result;
}

static GraphicsBase* createGraphicsBase(const gpc_polygon& p)
{
	gpc_tristrip tristrip;

	gpc_polygon_to_tristrip(const_cast<gpc_polygon*>(&p), &tristrip);

	GraphicsBase* result = createGraphicsBase(tristrip);

	gpc_free_tristrip(&tristrip);

	return result;
}

static GraphicsBase* createSolidPolygon(float r, float g, float b, float a, 
										const std::vector<std::vector<Point2f> > & contours)
{
	gpc_polygon p = {0};


	for (std::size_t i = 0; i < contours.size(); ++i)
	{
		const std::vector<Point2f>& contour = contours[i];

		gpc_vertex_list c = {contour.size(), new gpc_vertex[contour.size()]};

		for (std::size_t j = 0; j < contour.size(); ++j)
		{
			c.vertex[j].x = contour[j].x;
			c.vertex[j].y = contour[j].y;
		}

		gpc_add_contour(&p, &c, 0);

		delete [] c.vertex;
	}

	GraphicsBase* result = createGraphicsBase(p);

	result->setColor(r, g, b, a);

	gpc_free_polygon(&p);

	return result;
}



static gpc_vertex_list lineToContour(float x0, float y0, float x1, float y1, float thickness)
{
	const int dangle = 45;

	int npoints = 0;
	for (int i = 90; i <= 270; i += dangle)
		npoints += 2;

	gpc_vertex_list c = {npoints, (gpc_vertex *)malloc(sizeof(gpc_vertex) * npoints)};

	float ux = x1 - x0;
	float uy = y1 - y0;

	float l = std::sqrt(ux * ux + uy * uy);

	if (l == 0)
	{
		ux = 1;
		uy = 0;
	}
	else
	{
		ux /= l;
		uy /= l;
	}

	float vx = -uy;
	float vy =  ux;

	int j = 0;

	for (int i = 90; i <= 270; i += dangle)
	{
		float angle = i * M_PI / 180;

		float x = cos(angle) * thickness * 0.5f;
		float y = sin(angle) * thickness * 0.5f;

		c.vertex[j].x = x * ux + y * vx + x0;
		c.vertex[j++].y = x * uy + y * vy + y0;
	}

	for (int i = 270; i <= 90 + 360; i += dangle)
	{
		float angle = i * M_PI / 180;

		float x = cos(angle) * thickness * 0.5f + l;
		float y = sin(angle) * thickness * 0.5f;

		c.vertex[j].x = x * ux + y * vx + x0;
		c.vertex[j++].y = x * uy + y * vy + y0;
	}

	return c;
}

GraphicsBase* createSolidLineStrip(float r, float g, float b, float a,
								   float thickness,
								   const std::vector<Point2f>& points)
{
	gpc_polygon p = {0};

	for (std::size_t i = 1; i < points.size(); ++i)
	{
		gpc_polygon p2 = {0};

		const Point2f& p0 = points[i - 1];
		const Point2f& p1 = points[i];

		gpc_vertex_list c = lineToContour(p0.x, p0.y, p1.x, p1.y, thickness);

		gpc_add_contour(&p2, &c, 0);

		gpc_polygon_clip(GPC_UNION, &p, &p2, &p);

		gpc_free_polygon(&p2);

		free(c.vertex);
	}

	GraphicsBase* result = createGraphicsBase(p);

	result->setColor(r, g, b, a);

	gpc_free_polygon(&p);

	return result;
}


class SolidLineStrip : public GraphicsItem2
{
public:
	SolidLineStrip(	float r, float g, float b, float a,
					float thickness,
					const std::vector<Point2f>& points) : r_(r), g_(g), b_(b), a_(a)
	{
		// create the polygon
		gpc_polygon p = {0};

		for (std::size_t i = 1; i < points.size(); ++i)
		{
			gpc_polygon p2 = {0};

			const Point2f& p0 = points[i - 1];
			const Point2f& p1 = points[i];

			gpc_vertex_list c = lineToContour(p0.x, p0.y, p1.x, p1.y, thickness);

			gpc_add_contour(&p2, &c, 0);

			gpc_polygon_clip(GPC_UNION, &p, &p2, &p);

			gpc_free_polygon(&p2);

			free(c.vertex);
		}

		gpc_tristrip tristrip_;
	
		gpc_polygon_to_tristrip(&p, &tristrip_);

		tristripf_.resize(tristrip_.num_strips);
		for (int i = 0; i < tristrip_.num_strips; ++i)
		{
			tristripf_[i].resize(tristrip_.strip[i].num_vertices * 2);
			for (int j = 0; j < tristrip_.strip[i].num_vertices; ++j)
			{
				tristripf_[i][j * 2 + 0] = tristrip_.strip[i].vertex[j].x;
				tristripf_[i][j * 2 + 1] = tristrip_.strip[i].vertex[j].y;
			}
		}

		gpc_free_tristrip(&tristrip_);
		gpc_free_polygon(&p);
	}

	~SolidLineStrip()
	{
	}

	virtual void draw()
	{
		oglDisable(GL_TEXTURE_2D);

		glPushColor();
		glMultColor(r_, g_, b_, a_);

		oglEnableClientState(GL_VERTEX_ARRAY);
		for (std::size_t i = 0; i < tristripf_.size(); ++i)
		{
			glVertexPointer(2, GL_FLOAT, 0, &tristripf_[i][0]);
			oglDrawArrays(GL_TRIANGLE_STRIP, 0, tristripf_[i].size() / 2);
		}
		oglDisableClientState(GL_VERTEX_ARRAY);
		glPopColor();
	}

private:
	std::vector<std::vector<float> > tristripf_;
	float r_, g_, b_, a_;
};

class SolidPolygon : public GraphicsItem2
{
public:
	SolidPolygon(	float r, float g, float b, float a,
					const std::vector<std::vector<Point2f> > & contours) : r_(r), g_(g), b_(b), a_(a)
	{
		gpc_polygon p = {0};


		for (std::size_t i = 0; i < contours.size(); ++i)
		{
			const std::vector<Point2f>& contour = contours[i];

			gpc_vertex_list c = {contour.size(), new gpc_vertex[contour.size()]};

			for (std::size_t j = 0; j < contour.size(); ++j)
			{
				c.vertex[j].x = contour[j].x;
				c.vertex[j].y = contour[j].y;
			}

			gpc_add_contour(&p, &c, 0);

			delete [] c.vertex;
		}

		gpc_tristrip tristrip_;
	
		gpc_polygon_to_tristrip(&p, &tristrip_);

		tristripf_.resize(tristrip_.num_strips);
		for (int i = 0; i < tristrip_.num_strips; ++i)
		{
			tristripf_[i].resize(tristrip_.strip[i].num_vertices * 2);
			for (int j = 0; j < tristrip_.strip[i].num_vertices; ++j)
			{
				tristripf_[i][j * 2 + 0] = tristrip_.strip[i].vertex[j].x;
				tristripf_[i][j * 2 + 1] = tristrip_.strip[i].vertex[j].y;
			}
		}

		gpc_free_tristrip(&tristrip_);
		gpc_free_polygon(&p);
	}


	~SolidPolygon()
	{
	}

	virtual void draw()
	{
		oglDisable(GL_TEXTURE_2D);

		glPushColor();
		glMultColor(r_, g_, b_, a_);

		oglEnableClientState(GL_VERTEX_ARRAY);
		for (std::size_t i = 0; i < tristripf_.size(); ++i)
		{
			glVertexPointer(2, GL_FLOAT, 0, &tristripf_[i][0]);
			oglDrawArrays(GL_TRIANGLE_STRIP, 0, tristripf_[i].size() / 2);
		}
		oglDisableClientState(GL_VERTEX_ARRAY);
		glPopColor();
	}


private:
	std::vector<std::vector<float> > tristripf_;
	float r_, g_, b_, a_;
};


Graphics2::Graphics2()
{
	clear();
}

Graphics2::~Graphics2()
{
	clear();
}

void Graphics2::lineStyle(float thickness/* = F_NAN*/, unsigned int color/* = 0*/, float alpha/* = 1.f*/)
{
	endLineStrip();

	int r = (color >> 16) & 0xff;
	int g = (color >> 8) & 0xff;
	int b = color & 0xff;

	liner_ = r / 255.f;
	lineg_ = g / 255.f;
	lineb_ = b / 255.f;
	linea_ = alpha;

	thickness_ = thickness;
	if (thickness_ < 0.f)
		thickness_ = 0.f;
}

void Graphics2::moveTo(float x, float y)
{
	endLineStrip();

	contours_.push_back(std::vector<Point2f>());

	penx_ = x;
	peny_ = y;
}

void Graphics2::lineTo(float x, float y)
{
	if (lineStrip_.empty())
	{
		lineStrip_.push_back(Point2f(penx_, peny_));
		extendBounds(penx_, peny_, thickness_);
	}
	lineStrip_.push_back(Point2f(x, y));
	extendBounds(x, y, thickness_);

	if (contours_.empty())
		contours_.push_back(std::vector<Point2f>());
	if (contours_.back().empty())
		contours_.back().push_back(Point2f(penx_, peny_));
	contours_.back().push_back(Point2f(x, y));

	penx_ = x;
	peny_ = y;
}

void Graphics2::draw()
{
	endFill();
	endLineStrip();

	for (std::size_t i = 0; i < items_.size(); ++i)
		items_[i]->draw();
}

void Graphics2::beginFill(unsigned int color, float alpha/* = 1.f*/)
{
	endFill();

	int r = (color >> 16) & 0xff;
	int g = (color >> 8) & 0xff;
	int b = color & 0xff;

	fillr_ = r / 255.f;
	fillg_ = g / 255.f;
	fillb_ = b / 255.f;
	filla_ = alpha;

	contours_.clear();

	fill_ = true;
}

void Graphics2::endFill()
{
	if (fill_ == true)
	{
		if (contours_.empty() == false)
			items_.push_back(createSolidPolygon(fillr_, fillg_, fillb_, filla_, contours_));

		endLineStrip();

		for (std::size_t i = 0; i < lineItems_.size(); ++i)
			items_.push_back(lineItems_[i]);
		lineItems_.clear();

		fill_ = false;
		contours_.clear();
	}
}

void Graphics2::endLineStrip()
{
	if (thickness_ == thickness_ && lineStrip_.size() >= 2)	// it not nan
	{
		if (fill_ == true)
			lineStrip_.push_back(lineStrip_.front());
		
		GraphicsBase* strip = createSolidLineStrip(liner_, lineg_, lineb_, linea_, thickness_, lineStrip_);

		if (fill_ == true)
			lineItems_.push_back(strip);
		else
			items_.push_back(strip);
	}
	lineStrip_.clear();
}

void Graphics2::clear()
{
	liner_ = 0;
	lineg_ = 0;
	lineb_ = 0;
	linea_ = 0;
	thickness_ = F_NAN;

	fillr_ = 0;
	fillg_ = 0;
	fillb_ = 0;
	filla_ = 0;
	fill_ = false;

	penx_ = 0;
	peny_ = 0;

	lineStrip_.clear();
	contours_.clear();

	for (std::size_t i = 0; i < lineItems_.size(); ++i)
		delete lineItems_[i];
	lineItems_.clear();

	for (std::size_t i = 0; i < items_.size(); ++i)
		delete items_[i];
	items_.clear();

	min_ = Point2f( 1e30f,  1e30f);
	max_ = Point2f(-1e30f, -1e30f);
}

void Graphics2::extendBounds(float x, float y, float thickness)
{
	if (thickness != thickness)
		thickness = 0.f;

	min_.x = std::min(x - thickness * 0.5f, min_.x);
	min_.y = std::min(y - thickness * 0.5f, min_.y);
	max_.x = std::max(x + thickness * 0.5f, max_.x);
	max_.y = std::max(y + thickness * 0.5f, max_.y);
}

void Graphics2::bounds(Point2f* min, Point2f* max) const
{
	if (min)
		*min = min_;
	if (max)
		*max = max_;
}
