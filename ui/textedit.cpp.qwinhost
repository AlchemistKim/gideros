#include "textedit.h"
#include <Scintilla.h>
#include <SciLexer.h>

#include <QFile>
#include <QMessageBox>
#include <QTextStream>
#include <QApplication>
#include <QFileInfo>

const COLORREF black = RGB(0,0,0);
const COLORREF white = RGB(0xff,0xff,0xff);

ScintillaWinHost::ScintillaWinHost(QWidget *parent)
: QWinHost(parent)
{
	setFocusPolicy(Qt::StrongFocus);
	fn = 0;
	ptr = 0;
	ensurePolished();
}

ScintillaWinHost::~ScintillaWinHost()
{

}

void ScintillaWinHost::SetAStyle(int style, COLORREF fore, COLORREF back, int size, const char *face) {
	SendEditor(SCI_STYLESETFORE, style, fore);
	SendEditor(SCI_STYLESETBACK, style, back);
	if (size >= 1)
		SendEditor(SCI_STYLESETSIZE, style, size);
	if (face) 
		SendEditor(SCI_STYLESETFONT, style, reinterpret_cast<LPARAM>(face));
}

void ScintillaWinHost::setLuaLexer()
{
	static const char lua_instre1[] = "and break do else elseif end false for function if in local nil not or repeat return then true until while";
	static const char lua_instre2[] = "_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring print tonumber tostring type unpack _ALERT _ERRORMESSAGE _INPUT _PROMPT _OUTPUT _STDERR _STDIN _STDOUT call dostring foreach foreachi getn globals newtype rawget rawset require sort tinsert tremove _G getfenv getmetatable ipairs loadlib next pairs pcall rawegal rawget rawset require setfenv setmetatable xpcall string table math coroutine io os debug";
	static const char lua_type1[] = "abs acos asin atan atan2 ceil cos deg exp floor format frexp gsub ldexp log log10 max min mod rad random randomseed sin sqrt strbyte strchar strfind strlen strlower strrep strsub strupper tan string.byte string.char string.dump string.find string.len string.lower string.rep string.sub string.upper string.format string.gfind string.gsub table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod math.pi math.rad math.random math.randomseed math.sin math.sqrt math.tan";
	static const char lua_type2[] = "openfile closefile readfrom writeto appendto remove rename flush seek tmpfile tmpname read write clock date difftime execute exit getenv setlocale time coroutine.create coroutine.resume coroutine.status coroutine.wrap coroutine.yield io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write io.stdin io.stdout io.stderr os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname";


	SendEditor(SCI_SETLEXER, SCLEX_LUA);
	SendEditor(SCI_SETSTYLEBITS, SendEditor(SCI_GETSTYLEBITSNEEDED));

	SendEditor(SCI_SETKEYWORDS, 0, 
		reinterpret_cast<LPARAM>(lua_instre1));
	SendEditor(SCI_SETKEYWORDS, 1, 
		reinterpret_cast<LPARAM>(lua_instre2));
	SendEditor(SCI_SETKEYWORDS, 2, 
		reinterpret_cast<LPARAM>(lua_type1));
	SendEditor(SCI_SETKEYWORDS, 3, 
		reinterpret_cast<LPARAM>(lua_type2));

	// Set up the global default style. These attributes are used wherever no explicit choices are made.
	SetAStyle(STYLE_DEFAULT, black, white, 10, "Courier New");
	SendEditor(SCI_STYLECLEARALL);	// Copies global style to all others

	SendEditor(SCI_STYLESETFORE, SCE_LUA_DEFAULT,			(int)RGB(0x00, 0x00, 0x00));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_COMMENT,			(int)RGB(0x00, 0x80, 0x00));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_COMMENTLINE,		(int)RGB(0x00, 0x80, 0x00));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_COMMENTDOC,		(int)RGB(0x00, 0x80, 0x80));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_LITERALSTRING,		(int)RGB(0x95, 0x00, 0x4A));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_PREPROCESSOR,		(int)RGB(0x80, 0x40, 0x00));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_WORD,				(int)RGB(0x00, 0x00, 0xFF));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_NUMBER,			(int)RGB(0xFF, 0x80, 0x00));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_STRING,			(int)RGB(0x80, 0x80, 0x80));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_CHARACTER,			(int)RGB(0x80, 0x80, 0x80));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_OPERATOR,			(int)RGB(0x00, 0x00, 0x80));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_WORD2,				(int)RGB(0x00, 0x80, 0xCF));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_WORD3,				(int)RGB(0x80, 0x00, 0xFF));
	SendEditor(SCI_STYLESETFORE, SCE_LUA_WORD4,				(int)RGB(0x00, 0x00, 0xA0));


	SendEditor(SCI_SETMARGINTYPEN, 0, SC_MARGIN_NUMBER);
	SendEditor(SCI_SETMARGINWIDTHN, 0, SendEditor(SCI_TEXTWIDTH, STYLE_LINENUMBER, "_9999"));		// TODO: do this dynamic, look for "SetLineNumberWidth" in scite code

	SendEditor(SCI_SETMARGINTYPEN, 1, SC_MARGIN_SYMBOL);
	SendEditor(SCI_SETMARGINWIDTHN, 1, 16);

	SendEditor(SCI_MARKERDEFINE, 0, SC_MARK_ARROW);
}

HWND ScintillaWinHost::createWindow(HWND parent, HINSTANCE instance)
{
	HWND hwnd = CreateWindowEx(0,
		L"Scintilla",L"", WS_CHILD | WS_VISIBLE | WS_TABSTOP | WS_CLIPCHILDREN,
		CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, parent, NULL, instance, NULL);

	fn = (int (__cdecl *)(void *,int,int,int))SendMessage(
		hwnd,SCI_GETDIRECTFUNCTION,0,0);
	ptr = (void *)SendMessage(hwnd,SCI_GETDIRECTPOINTER,0,0);

	return hwnd;
}


TextEdit::TextEdit(QWidget *parent)
	: QMdiSubWindow(parent)
{
	setAttribute(Qt::WA_DeleteOnClose);

	scintilla_ = new ScintillaWinHost(this);
	setWidget(scintilla_);
	
	connect(scintilla_, SIGNAL(notify(MSG*, long*)), this, SLOT(onNotify(MSG*, long*)));

	isUntitled_ = true;
}

TextEdit::~TextEdit()
{

}

void TextEdit::newFile()
{
	static int sequenceNumber = 1;
	isUntitled_ = true;
	fileName_ = tr("new %1").arg(sequenceNumber++);
	setWindowTitle(fileName_ + "[*]");

	SendEditor(SCI_CLEARALL);			// Unless the document is read-only, this deletes all the text.
	SendEditor(SCI_EMPTYUNDOBUFFER);	// This command tells Scintilla to forget any saved undo or redo history.
	SendEditor(SCI_SETSAVEPOINT);		// This message tells Scintilla that the current state of the document is unmodified.
}

bool TextEdit::loadFile(const QString& fileName)
{
	QFile file(fileName);
	if (file.open(QFile::ReadOnly | QFile::Text) == false)
	{
		QMessageBox::warning(0, tr("Warning"),
			tr("Cannot read file %1:\n%2.")
			.arg(fileName)
			.arg(file.errorString()));
		return false;
	}

	isUntitled_ = false;
	fileName_ = fileName;
	QFileInfo fileInfo(fileName_);
	setWindowTitle(fileInfo.fileName() + "[*]");

	QTextStream in(&file);
	QApplication::setOverrideCursor(Qt::WaitCursor);
	
	SendEditor(SCI_CANCEL);
	SendEditor(SCI_SETUNDOCOLLECTION, 0);						// stop collecting undo information
	SendEditor(SCI_SETTEXT, 0, qPrintable(in.readAll()));		// replaces all the text in the document with the zero terminated text string you pass in
	SendEditor(SCI_SETUNDOCOLLECTION, 1);						// collect undo information
	SendEditor(SCI_EMPTYUNDOBUFFER);							// forget any saved undo or redo history
	SendEditor(SCI_SETSAVEPOINT);								// tell Scintilla that the current state of the document is unmodified
	SendEditor(SCI_GOTOPOS, 0);									// remove any selection, set the caret at pos and scroll the view to make the caret visible, if necessary

	QApplication::restoreOverrideCursor();

	scintilla_->setLuaLexer();

	return true;
}

const QString& TextEdit::fileName() const
{
	return fileName_;
}

void TextEdit::onNotify(MSG * message, long * result)
{
	SCNotification* notification = reinterpret_cast<SCNotification*>(message->lParam);

	switch (notification->nmhdr.code)
	{
	case SCN_SAVEPOINTREACHED:
		setWindowModified(false);
		break;

	case SCN_SAVEPOINTLEFT:
		setWindowModified(true);
		break;
	}
}

bool TextEdit::hasSelectedText() const
{
	int currentPos = SendEditor(SCI_GETCURRENTPOS);
	int anchor = SendEditor(SCI_GETANCHOR);

	return currentPos != anchor;
}

bool TextEdit::isRedoAvailable() const
{
	return SendEditor(SCI_CANREDO) != 0;
}

bool TextEdit::isUndoAvailable() const
{
	return SendEditor(SCI_CANUNDO) != 0;
}

void TextEdit::gotoLine(int line)
{
	SendEditor(SCI_ENSUREVISIBLE, line);
	SendEditor(SCI_GOTOLINE, line);
}

bool TextEdit::isModified() const
{
	return SendEditor(SCI_GETMODIFY) != 0;
}

bool TextEdit::save()
{
	QFile file(fileName_);
	if (!file.open(QFile::WriteOnly | QFile::Text))
	{
		QMessageBox::warning(0, tr("Warning"),
			tr("Cannot write file %1:\n%2.")
			.arg(fileName_)
			.arg(file.errorString()));
		return false;
	}

	QApplication::setOverrideCursor(Qt::WaitCursor);

	int nLen = SendEditor(SCI_GETLENGTH);
	char* buffer = new char[nLen + 1];
	SendEditor(SCI_GETTEXT, nLen+1, (int)buffer);

	{
		QTextStream out(&file);
		out << buffer;
	}

	delete [] buffer;

	file.close();

	QApplication::restoreOverrideCursor();

	SendEditor(SCI_SETSAVEPOINT);

	return true;
}

void TextEdit::toogleBookmark()
{
	int line = SendEditor(SCI_LINEFROMPOSITION, SendEditor(SCI_GETCURRENTPOS));
	int marker = SendEditor(SCI_MARKERGET, line);
	
	if (marker & (1 << 0))
		SendEditor(SCI_MARKERDELETE, line, 0);
	else
		SendEditor(SCI_MARKERADD, line, 0);
}

void TextEdit::nextBookmark()
{
	int line = SendEditor(SCI_LINEFROMPOSITION, SendEditor(SCI_GETCURRENTPOS));

	int next = SendEditor(SCI_MARKERNEXT, line + 1, (1 << 0));

	if (next == -1)
		next = SendEditor(SCI_MARKERNEXT, 0, (1 << 0));

	if (next != -1)
	{
		SendEditor(SCI_ENSUREVISIBLE, next);
		SendEditor(SCI_GOTOLINE, next);
	}
}

void TextEdit::previousBookmark()
{
	int line = SendEditor(SCI_LINEFROMPOSITION, SendEditor(SCI_GETCURRENTPOS));

	int prev = SendEditor(SCI_MARKERPREVIOUS, line - 1, (1 << 0));

	if (prev == -1)
		prev = SendEditor(SCI_MARKERPREVIOUS, SendEditor(SCI_GETLINECOUNT), (1 << 0));

	if (prev != -1)
	{
		SendEditor(SCI_ENSUREVISIBLE, prev);
		SendEditor(SCI_GOTOLINE, prev);
	}
}

void TextEdit::clearBookmarks()
{
	SendEditor(SCI_MARKERDELETEALL, 0);
}
