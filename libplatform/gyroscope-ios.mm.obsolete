#include <gyroscope.h>
#import <CoreMotion/CoreMotion.h>

class Gyroscope::GyroscopeImpl
{
public:
	GyroscopeImpl()
	{
		if (NSClassFromString(@"CMMotionManager") != nil)
			coreMotionManager_ = [[CMMotionManager alloc] init];
	}
	
	~GyroscopeImpl()
	{
		if (coreMotionManager_ != nil)
			[coreMotionManager_ release];
	}

	
	bool isAvailable() const
	{
		if (coreMotionManager_ == nil)
			return false;
		
		return [coreMotionManager_ isGyroAvailable] == YES;
	}
	
	void start()
	{
		if (coreMotionManager_ == nil)
			return;
		
		[coreMotionManager_ startGyroUpdates];		
	}

	void stop()
	{
		if (coreMotionManager_ == nil)
			return;
		
		[coreMotionManager_ stopGyroUpdates];		
	}

	
	void getRotationRate(double* x, double* y, double* z) const
	{
		if (coreMotionManager_ == nil)
		{
			if (x)
				*x = 0;
			if (y)
				*y = 0;
			if (z)
				*z = 0;
			return;
		}

		CMRotationRate rotationRate = coreMotionManager_.gyroData.rotationRate;
		
		if (x)
			*x = rotationRate.x;
		if (y)
			*y = rotationRate.y;
		if (z)
			*z = rotationRate.z;
	}

private:
	CMMotionManager* coreMotionManager_;
};

Gyroscope::Gyroscope()
{
	pimpl_ = new GyroscopeImpl;
}

Gyroscope::~Gyroscope()
{
	delete pimpl_;
}

bool Gyroscope::isAvailable() const
{
	return pimpl_->isAvailable();
}

void Gyroscope::start()
{
	pimpl_->start();
}

void Gyroscope::stop()
{
	pimpl_->stop();	
}

void Gyroscope::getRotationRate(double* x, double* y, double* z) const
{
	pimpl_->getRotationRate(x, y, z);
}
