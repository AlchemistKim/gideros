#include "geolocation.h"
#include <jni.h>
#include <javanativebridge.h>

class Geolocation::GeolocationImpl
{
public:
	GeolocationImpl()
	{
		locationChanged = false;
		headingChanged = false;
		error = false;

		JNIEnv* env = jnb_getEnv();

		jclass localRefCls = env->FindClass("com/giderosmobile/android/player/JavaNativeBridge");
		javaNativeBridge = (jclass)env->NewGlobalRef(localRefCls);
		env->DeleteLocalRef(localRefCls);

		setCallbackDataID = env->GetStaticMethodID(javaNativeBridge, "setGeolocationCallbackData", "(J)V");
		isAvailableID = env->GetStaticMethodID(javaNativeBridge, "isGeolocationAvailable", "()Z");
		isHeadingAvailableID = env->GetStaticMethodID(javaNativeBridge, "isHeadingAvailable", "()Z");
		setAccuracyID = env->GetStaticMethodID(javaNativeBridge, "setGeolocationAccuracy", "(D)V");
		getAccuracyID = env->GetStaticMethodID(javaNativeBridge, "getGeolocationAccuracy", "()D");
		setThresholdID = env->GetStaticMethodID(javaNativeBridge, "setGeolocationThreshold", "(D)V");
		getThresholdID = env->GetStaticMethodID(javaNativeBridge, "getGeolocationThreshold", "()D");
		startID = env->GetStaticMethodID(javaNativeBridge, "startGeolocation", "()V");
		stopID = env->GetStaticMethodID(javaNativeBridge, "stopGeolocation", "()V");
		startUpdatingLocationID = env->GetStaticMethodID(javaNativeBridge, "startUpdatingLocation", "()V");
		stopUpdatingLocationID = env->GetStaticMethodID(javaNativeBridge, "stopUpdatingLocation", "()V");
		startUpdatingHeadingID = env->GetStaticMethodID(javaNativeBridge, "startUpdatingHeading", "()V");
		stopUpdatingHeadingID = env->GetStaticMethodID(javaNativeBridge, "stopUpdatingHeading", "()V");
	}

	volatile double latitude, longitude, altitude;
	volatile bool locationChanged;
	
	volatile double magneticHeading, trueHeading;
	volatile bool headingChanged;
	
	volatile bool error;

	jclass javaNativeBridge;

	jmethodID setCallbackDataID;
	jmethodID isAvailableID;
	jmethodID isHeadingAvailableID;
	jmethodID setAccuracyID;
	jmethodID getAccuracyID;
	jmethodID setThresholdID;
	jmethodID getThresholdID;
	jmethodID startID;
	jmethodID stopID;
	jmethodID startUpdatingLocationID;
	jmethodID stopUpdatingLocationID;
	jmethodID startUpdatingHeadingID;
	jmethodID stopUpdatingHeadingID;
};


Geolocation::Geolocation(LocationCallback locationCallback,
						 HeadingCallback headingCallback,
						 ErrorCallback errorCallback,
						 void* callbackData)
{
	locationCallback_ = locationCallback;
	headingCallback_ = headingCallback;
	errorCallback_ = errorCallback;
	callbackData_ = callbackData;

	pimpl_ = new GeolocationImpl;

	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->setCallbackDataID, (jlong)pimpl_);
}

Geolocation::~Geolocation()
{
	JNIEnv* env = jnb_getEnv();
	env->DeleteGlobalRef(pimpl_->javaNativeBridge);

	delete pimpl_;
}

void Geolocation::tick()
{
	if (pimpl_->locationChanged)
	{
		locationCallback_(callbackData_, pimpl_->latitude, pimpl_->longitude, pimpl_->altitude);
		pimpl_->locationChanged = false;
	}

	if (pimpl_->headingChanged)
	{
		headingCallback_(callbackData_, pimpl_->magneticHeading, pimpl_->trueHeading);
		pimpl_->headingChanged = false;
	}
	
	if (pimpl_->error)
	{
		errorCallback_(callbackData_);
		pimpl_->error = false;
	}
}

bool Geolocation::isAvailable() const
{
	JNIEnv* env = jnb_getEnv();
	return env->CallStaticBooleanMethod(pimpl_->javaNativeBridge, pimpl_->isAvailableID) != 0;
}

bool Geolocation::isHeadingAvailable() const
{
	JNIEnv* env = jnb_getEnv();
	return env->CallStaticBooleanMethod(pimpl_->javaNativeBridge, pimpl_->isHeadingAvailableID) != 0;
}

void Geolocation::setAccuracy(double accuracy)
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->setAccuracyID, (jdouble)accuracy);
}

double Geolocation::getAccuracy() const
{
	JNIEnv* env = jnb_getEnv();
	return env->CallStaticDoubleMethod(pimpl_->javaNativeBridge, pimpl_->getAccuracyID);
}

void Geolocation::setThreshold(double threshold)
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->setThresholdID, (jdouble)threshold);
}

double Geolocation::getThreshold() const
{
	JNIEnv* env = jnb_getEnv();
	return env->CallStaticDoubleMethod(pimpl_->javaNativeBridge, pimpl_->getThresholdID);
}

void Geolocation::start()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->startID);
}

void Geolocation::stop()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->stopID);
}

void Geolocation::startUpdatingLocation()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->startUpdatingLocationID);
}

void Geolocation::stopUpdatingLocation()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->stopUpdatingLocationID);
}

void Geolocation::startUpdatingHeading()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->startUpdatingHeadingID);
}

void Geolocation::stopUpdatingHeading()
{
	JNIEnv* env = jnb_getEnv();
	env->CallStaticVoidMethod(pimpl_->javaNativeBridge, pimpl_->stopUpdatingHeadingID);
}

extern "C"
{
void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeLocationChanged(JNIEnv* env, jclass cls, jdouble latitude, jdouble longitude, jdouble altitude, jlong data)
{
	Geolocation::GeolocationImpl* pimpl = (Geolocation::GeolocationImpl*)data;
	pimpl->latitude = latitude;
	pimpl->longitude = longitude;
	pimpl->altitude = altitude;
	pimpl->locationChanged = true;
}

void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeHeadingChanged(JNIEnv* env, jclass cls, jdouble magneticHeading, jdouble trueHeading, jlong data)
{
	Geolocation::GeolocationImpl* pimpl = (Geolocation::GeolocationImpl*)data;
	pimpl->magneticHeading = magneticHeading;
	pimpl->trueHeading = trueHeading;
	pimpl->headingChanged = true;
}

}

