#include "geolocation.h"

#import <UIKit/UIKit.h>
#import <CoreLocation/CoreLocation.h>

class Geolocation::GeolocationImpl
{
public:
	GeolocationImpl()
	{
		accuracy = 0;
		locationChanged = false;
		headingChanged = false;
		error = false;
	}

	CLLocationManager* locationManager;
	double accuracy;
	
	volatile double latitude, longitude, altitude;
	volatile bool locationChanged;
	
	volatile double magneticHeading, trueHeading;
	volatile bool headingChanged;
	
	volatile bool error;
};

@interface GeolocationDelegate : NSObject<CLLocationManagerDelegate>
{
	Geolocation::GeolocationImpl* pimpl_;
}

- (id)initWithPimpl:(Geolocation::GeolocationImpl*)pimpl;

@end

Geolocation::Geolocation(LocationCallback locationCallback,
						 HeadingCallback headingCallback,
						 ErrorCallback errorCallback,
						 void* callbackData)
{
	locationCallback_ = locationCallback;
	headingCallback_ = headingCallback;
	errorCallback_ = errorCallback;
	callbackData_ = callbackData;

	pimpl_ = new GeolocationImpl;
	
	pimpl_->locationManager = [[CLLocationManager alloc] init];
	pimpl_->locationManager.delegate = [[GeolocationDelegate alloc] initWithPimpl:pimpl_];
}

Geolocation::~Geolocation()
{
	[pimpl_->locationManager.delegate release];
	pimpl_->locationManager.delegate = nil;
	[pimpl_->locationManager release];
	
	delete pimpl_;
}

void Geolocation::tick()
{
	if (pimpl_->locationChanged)
	{
		locationCallback_(callbackData_, pimpl_->latitude, pimpl_->longitude, pimpl_->altitude);
		pimpl_->locationChanged = false;
	}

	if (pimpl_->headingChanged)
	{
		headingCallback_(callbackData_, pimpl_->magneticHeading, pimpl_->trueHeading);
		pimpl_->headingChanged = false;
	}
	
	if (pimpl_->error)
	{
		errorCallback_(callbackData_);
		pimpl_->error = false;
	}
}


bool Geolocation::isAvailable() const
{
	BOOL locationServicesEnabledInstancePropertyAvailable = [pimpl_->locationManager respondsToSelector:@selector(locationServicesEnabled)]; // iOS 3.x
	BOOL locationServicesEnabledClassPropertyAvailable = [CLLocationManager respondsToSelector:@selector(locationServicesEnabled)]; // iOS 4.x
	
	if (locationServicesEnabledClassPropertyAvailable)
	{
		return [CLLocationManager locationServicesEnabled];
	}
	else if (locationServicesEnabledInstancePropertyAvailable)
	{
		return [pimpl_->locationManager locationServicesEnabled];
	}
	
	return NO;
}

bool Geolocation::isHeadingAvailable() const
{
	BOOL headingInstancePropertyAvailable = [pimpl_->locationManager respondsToSelector:@selector(headingAvailable)]; // iOS 3.x
	BOOL headingClassPropertyAvailable = [CLLocationManager respondsToSelector:@selector(headingAvailable)]; // iOS 4.x
	
	if (headingClassPropertyAvailable)
	{
		return [CLLocationManager headingAvailable];
	} 
	else if (headingInstancePropertyAvailable) 
	{
		return [pimpl_->locationManager headingAvailable];
	}
	
	return NO;
}

void Geolocation::setAccuracy(double desiredAccuracy_num)
{
	pimpl_->accuracy = desiredAccuracy_num;
	
	CLLocationAccuracy desiredAccuracy = kCLLocationAccuracyBest;
	if (desiredAccuracy_num < 10)
		desiredAccuracy = kCLLocationAccuracyBest;
	else if (desiredAccuracy_num < 100)
		desiredAccuracy = kCLLocationAccuracyNearestTenMeters;
	else if (desiredAccuracy_num < 1000)
		desiredAccuracy = kCLLocationAccuracyHundredMeters;
	else if (desiredAccuracy_num < 3000)
		desiredAccuracy = kCLLocationAccuracyKilometer;
	else
		desiredAccuracy = kCLLocationAccuracyThreeKilometers;
	
	pimpl_->locationManager.desiredAccuracy = desiredAccuracy;
}

double Geolocation::getAccuracy() const
{
	return pimpl_->accuracy;
}

void Geolocation::setThreshold(double threshold)
{
	pimpl_->locationManager.distanceFilter = threshold;
}

double Geolocation::getThreshold() const
{
	return pimpl_->locationManager.distanceFilter;
}

void Geolocation::start()
{
	startUpdatingLocation();
	startUpdatingHeading();	
}

void Geolocation::stop()
{
	stopUpdatingLocation();
	stopUpdatingHeading();	
}

void Geolocation::startUpdatingLocation()
{
	[pimpl_->locationManager startUpdatingLocation];
}

void Geolocation::stopUpdatingLocation()
{	
	[pimpl_->locationManager stopUpdatingLocation];
}

void Geolocation::startUpdatingHeading()
{
	[pimpl_->locationManager startUpdatingHeading];
}

void Geolocation::stopUpdatingHeading()
{
	[pimpl_->locationManager stopUpdatingHeading];
}


@implementation GeolocationDelegate

-(id) initWithPimpl:(Geolocation::GeolocationImpl*)pimpl
{
	if ((self = [super init]))
	{
		pimpl_ = pimpl;
	}
	
	return self;
}

- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation
{
	pimpl_->latitude = newLocation.coordinate.latitude;
	pimpl_->longitude = newLocation.coordinate.longitude;
	pimpl_->altitude = newLocation.altitude;
	pimpl_->locationChanged = true;
}

- (void)locationManager:(CLLocationManager *)manager didUpdateHeading:(CLHeading *)newHeading
{
	pimpl_->magneticHeading = newHeading.magneticHeading;
	pimpl_->trueHeading = newHeading.trueHeading;
	pimpl_->headingChanged = true;
}

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error
{
	pimpl_->error = true;
}

- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)manager
{
	return YES;
}

@end

