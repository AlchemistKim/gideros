#include "stdallocator.h"
#include "platform.h"


int StdAllocator::allocateCount = 0;
int StdAllocator::deallocateCount = 0;
int StdAllocator::totalMemory = 0;
int StdAllocator::deltaMemory = 0;



void* StdAllocator::allocateBytes(size_t count, const char* file/* = 0*/, int line/* = 0*/, const char* func/* = 0*/)
{
	size_t newcount = count + sizeof(size_t);
	allocateCount++;
	char* cptr = (char*)malloc(newcount);
	totalMemory += newcount;
	deltaMemory += newcount;
	*(size_t*)cptr = newcount;
	void* result = cptr + sizeof(size_t);

#if 0
	static double lastclk = iclock();
	double currclk = iclock();
	if (currclk - lastclk > 1)
	{
//		printf("allocateBytes(%d)\n", newcount);
		printf("totalMemory: %d\n", totalMemory);
		lastclk = currclk;
	}
#endif

	return result;
}

void StdAllocator::deallocateBytes(void* ptr)
{
	deallocateCount++;
	char* cptr = (char*)ptr - sizeof(size_t);
	size_t newcount = *(size_t*)cptr;
	totalMemory -= newcount;
	free(cptr);

#if 0
	static double lastclk = iclock();
	double currclk = iclock();
	if (currclk - lastclk > 1)
	{
//		printf("deallocateBytes(%d)\n", newcount);
		printf("totalMemory: %d\n", totalMemory);
		lastclk = currclk;
	}
#endif
}

size_t StdAllocator::getMaxAllocationSize()
{
	return std::numeric_limits<size_t>::max();
}


size_t g_msize(void* ptr)
{
	char* cptr = (char*)ptr - sizeof(size_t);
	size_t newcount = *(size_t*)cptr;
	return newcount - sizeof(size_t);
}

void* g_malloc(size_t size)
{
	return StdAllocator::allocateBytes(size);
}

void g_free(void* ptr)
{
	if (ptr != NULL)
		StdAllocator::deallocateBytes(ptr);
}

void* g_realloc(void* ptr, size_t size)
{
	if (ptr == NULL && size == 0)
	{
		return NULL;
	}
	else if (ptr == NULL && size != 0)
	{
		return g_malloc(size);
	}
	else if (ptr != NULL && size == 0)
	{
		g_free(ptr);
		return NULL;
	}
	else
	{
		void* newptr = g_malloc(size);
		size_t oldsize = g_msize(ptr);

		memcpy(newptr, ptr, std::min(oldsize, size));

		return newptr;
	}
}

