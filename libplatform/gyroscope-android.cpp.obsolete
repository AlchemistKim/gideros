#include <gyroscope.h>
#include <jni.h>
#include <javanativebridge.h>

class Gyroscope::GyroscopeImpl
{
public:
	GyroscopeImpl()
	{
		JNIEnv* env = jnb_getEnv();

		jclass localRefCls = env->FindClass("com/giderosmobile/android/player/JavaNativeBridge");
		javaNativeBridge_ = (jclass)env->NewGlobalRef(localRefCls);
		env->DeleteLocalRef(localRefCls);

		req_isAvailableID_ = env->GetStaticMethodID(javaNativeBridge_, "isGyroscopeAvailable", "()Z");
		req_startID_ = env->GetStaticMethodID(javaNativeBridge_, "startGyroscope", "(J)V");
		req_stopID_ = env->GetStaticMethodID(javaNativeBridge_, "stopGyroscope", "()V");

		gyrox_ = gyroy_ = gyroz_ = 0;
	}

	~GyroscopeImpl()
	{
		stop();

		JNIEnv* env = jnb_getEnv();
		env->DeleteGlobalRef(javaNativeBridge_);
	}

	bool isAvailable() const
	{
		JNIEnv* env = jnb_getEnv();
		return env->CallStaticBooleanMethod(javaNativeBridge_, req_isAvailableID_) != 0;
	}

	void start()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, req_startID_, (jlong)this);
	}

	void stop()
	{
		JNIEnv* env = jnb_getEnv();
		env->CallStaticVoidMethod(javaNativeBridge_, req_stopID_);

		gyrox_ = gyroy_ = gyroz_ = 0;
	}

	void getRotationRate(double* x, double* y, double* z) const
	{
		if (x)
			*x = gyrox_;
		if (y)
			*y = gyroy_;
		if (z)
			*z = gyroz_;
	}

	void setGyroscope(double x, double y, double z)
	{
		gyrox_ = x;
		gyroy_ = y;
		gyroz_ = z;
	}

private:
	jclass javaNativeBridge_;

	jmethodID req_isAvailableID_;
	jmethodID req_startID_;
	jmethodID req_stopID_;

	volatile double gyrox_, gyroy_, gyroz_;
};

extern "C"
{
void Java_com_giderosmobile_android_player_JavaNativeBridge_nativeSetGyroscope(JNIEnv* env, jclass cls, jfloat x, jfloat y, jfloat z, jlong data)
{
	Gyroscope::GyroscopeImpl* that = (Gyroscope::GyroscopeImpl*)data;
	that->setGyroscope(x, y, z);
}
}

Gyroscope::Gyroscope()
{
	pimpl_ = new Gyroscope::GyroscopeImpl();
}

Gyroscope::~Gyroscope()
{
	delete pimpl_;
}

bool Gyroscope::isAvailable() const
{
	pimpl_->isAvailable();
}

void Gyroscope::start()
{
	pimpl_->start();
}

void Gyroscope::stop()
{
	pimpl_->stop();
}

void Gyroscope::getRotationRate(double* x, double* y, double* z) const
{
	pimpl_->getRotationRate(x, y, z);
}
