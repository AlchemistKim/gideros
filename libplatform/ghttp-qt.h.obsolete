#ifndef GHTTPQT_H
#define GHTTPQT_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>
class QAuthenticator;
class QNetworkProxy;
#include <deque>
#include <map>

#include "ghttp.h"

class HTTPManager : public QObject
{
    Q_OBJECT
public:
    HTTPManager();
    ~HTTPManager();

    void tick();
    int get(const char* url, const ghttp_Header *header, ghttp_Callback callback, void* udata);
    int post(const char* url, const ghttp_Header *header, const void* data, size_t size, ghttp_Callback callback, void* udata);
    int deleteResource(const char* url, const ghttp_Header *header, ghttp_Callback callback, void* udata);
    int put(const char* url, const ghttp_Header *header, const void* data, size_t size, ghttp_Callback callback, void* udata);
    void close(int id);
    void closeAll();

private slots:
    void finished(QNetworkReply* reply);
    void downloadProgress(qint64 bytesReceived, qint64 bytesTotal);

private:
    QNetworkAccessManager* manager_;
    int nextid_;

    struct NetworkReply
    {
        int id;
        ghttp_Callback callback;
        void* udata;
    };
    std::map<QNetworkReply*, NetworkReply> map_;

    struct CallbackElement
    {
        int id;
        ghttp_Callback callback;
        int type;
        void* data;
        void* udata;
    };
    std::deque<CallbackElement> callbackQueue_;

    void deleteCallbackElement(CallbackElement& element);
};

#endif
