Class: EventDispatcher

All classes that dispatch events inherit from `EventDispatcher`. The target of
an event is a listener function and an optional data value.
When an event is dispatched, the registered function is called.
If the optional data value is given, it is used as a first parameter
while calling the listener function.

Event dispatching and event targets are the core part of the
Gideros event model. Different event types (such as `Event.ENTER_FRAME`,
`Event.TOUCHES_BEGIN` or `Event.MOUSE_DOwN`)
flow through the scene tree hierarchy differently. When a touch or mouse event occurs,
Gideros dispatches an event object into the event flow from the root of the scene tree.
On the other hand, `Event.ENTER_FRAME` event is dispatched to all `Sprite` objects.

If you want to define a class that dispatches events, you can inherit your class
from `EventDispatcher`.

Category: Events

Example:
	-- example 1
	ClassA = Core.class(EventDispatcher)
	ClassB = Core.class(EventDispatcher)

	function ClassA:funcA(event)
		print("funcA", self, event:getType(), event:getTarget())
	end

	local a = ClassA.new()
	local b = ClassB.new()

	b:addEventListener("myevent", a.funcA, a)	-- when b dispatches an "myevent" event,
												-- a.funcA will be called with 'a'
												-- as first parameter

	b:dispatchEvent(Event.new("myevent"))		-- will print "funcA"


	-- example 2
	Ball = Core.class(Sprite)

	function Ball:onEnterFrame()
		self:setX(self:getX() + 1)
	end

	ball = Ball.new()
	ball:addEventListener(Event.ENTER_FRAME, ball.onEnterFrame, ball)


---------------------------------------

Function: EventDispatcher:addEventListener

Registers a listener function and an optional data value so that the listener function is called when an event
of a particular type occurs.

Parameters:
	type - (string) The type of event.
	listener - (function) The listener function that processes the event.
	data -  (optional) An optional data parameter that is passed as a first argument to the listener function.


See Also:

[[EventDispatcher:removeEventListener]]

---------------------------------------

Function: EventDispatcher:removeEventListener

Removes a listener from the `EventDispatcher` object. `removeEventListener()` function expects
the same arguments with `addEventListener()` to remove the event. If there is no matching listener
registered, a call to this function has no effect.

Parameters:
	type - (string) The type of event.
	listener - (function) The listener object to remove.
	data - The data parameter that is used while registering the event.


See Also:

[[EventDispatcher:addEventListener]]

---------------------------------------

Function: EventDispatcher:dispatchEvent

Dispatches an event to this `EventDispatcher` instance.

Parameters:
	event - (Event) The `Event` object to be dispatched.


---------------------------------------

Function: EventDispatcher:hasEventListener

Checks if the `EventDispatcher` object has a event listener registered for the specified type of event.

Parameters:
	type - (string) The type of event.

Returns:
A value of `true` if a listener of the specified type is registered; `false` otherwise.

---------------------------------------

Class: Event

The objects of `Event` class contains information about an event that has occurred. `Event` objects
are passed to event listeners when an event occurs.

Usually event objects contains specific additional information about the event that has occured. For example,
when an `Event.MOUSE_DOWN` event occurs, `x` and `y` fields contain the coordinates:

	function onMouseDown(event)
		print(event.x, event.y)
	end

	mysprite:addEventListener(Event.MOUSE_DOWN, onMouseDown)

Users can create their own events and dispatch through the event mechanism:

	local event = Event.new("myevent")
	event.data1 = "12345"
	event.data2 = "abcde"

	mydispatcher:dispatchEvent(event)

Category: Events

---------------------------------------

Function: Event.new

Creates a new `Event` object to be dispatched from an `EventDispatcher`.

Parameters:
	type - (string)

Returns:
New `Event` object.

---------------------------------------

Function: Event:getType

Returns a string that represents the type of the event.

Returns:
Type of event.

---------------------------------------

Function: Event:getTarget

Returns the element on which the event listener was registered.

Returns:
Target of event.

---------------------------------------

Function: Event:stopPropagation

Disables the propagation of the current event in the scene tree hierarchy.
