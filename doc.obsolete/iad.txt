Class: iad

iAd module for iOS allows you to use iAd framework that was introduced in iOS 4.0. To load the iAd module, call `require "iad"`. After loading iAd module, `iad` table stores all 
classes and functions related to iAd framework.

---------------------------------------

Function: iad.isAvailable

Returns `true` if iAd framework is available for this platform, `false` otherwise. For iOS 4.0+, this function returns `true`.

Returns:
`true` if iAd framework is available for this platform, `false` otherwise
 
---------------------------------------

Class: iad.Banner > EventDispatcher

The `iad.Banner` class provides a view that displays banner advertisements to the user. When the user taps a banner view, the view triggers an action 
programmed into the advertisement. For example, an advertisement might show a movie, present a modal advertisement, or launch Safari to show a webpage.
Your application is notified when an action starts and stops, but does not otherwise interact with the advertisement. 

---------------------------------------

Function: iad.Banner.new

Creates an `iad.Banner` instance. If iAd framework is not available, this function gives an error.

The alignment and the orientation of the ad banner are defined by these 4 string constants:

* `iad.Banner.TOP = "top"`
* `iad.Banner.BOTTOM = "bottom"`
* `iad.Banner.PORTRAIT = "portrait"`
* `iad.Banner.LANDSCAPE = "landscape"`

And `iad.Banner` class dispatches these 4 events:

* `Event.BANNER_AD_LOADED = "bannerAdLoaded"`
* `Event.BANNER_AD_FAILED = "bannerAdFailed"`
* `Event.BANNER_ACTION_BEGIN = "bannerActionBegin"`
* `Event.BANNER_ACTION_FINISHED = "bannerActionFinished"`

When an ad banner is created, iAd will start requesting ads. Apple serves ads, and refreshes with new ads, on an automatic timer.
Apple also requires that the ad area be hidden when no ad is available to display. iAd module manages all this behavior for you automatically.

When an ad becomes available, it will be displayed on the screen, the event `Event.BANNER_AD_LOADED` is dispatched when one is about to be displayed,
or the event `Event.BANNER_AD_FAILED` is dispatched when the loading has failed. If the loading has failed, the fields `event.errorCode` and `event.errorDescription` 
contains information about the failure reason.

When the user clicks on an ad, the event `Event.BANNER_ACTION_BEGIN` is dispatched. At this time, the user will either be taken out of your application 
to view the app store (in this case `event.willLeaveApplication` field will be true), or they will be presented with a fullscreen advertisement to interact with, 
and `event.willLeaveApplication` will be false. In the latter case, you may decide to pause the application until the event `Event.BANNER_ACTION_FINISHED` is dispatched. 

Parameters:
	alignment - (string) whether you want ads to show top or bottom of the screen. It can be either iad.Banner.TOP or iad.Banner.BOTTOM.
	orientation - (string) orientation of the banner. It can be either iad.Banner.PORTRAIT or iad.Banner.LANDSCAPE.
	
Example:
	-- if the platform is iOS, load the iAd module
	if application:getDeviceInfo() == "iOS" then
		require "iad"
	end

	-- 4 event listeners for debug print
	local function onBannerAdLoaded()
		print("banner ad loaded")
	end

	local function onBannerAdFailed(event)
		print("banner ad failed", event.errorCode, event.errorDescription)
	end

	local function onBannerActionBegin(event)
		print("banner action begin", event.willLeaveApplication)
	end

	local function onBannerActionFinished()
		print("banner action finished")
	end
	
	-- if iAd module is loaded and iAd framework is available, create an ad banner and then show it
	local banner = nil
	if iad and iad.isAvailable() then
		banner = iad.Banner.new(iad.Banner.TOP, iad.Banner.PORTRAIT)
		banner:addEventListener(Event.BANNER_AD_LOADED, onBannerAdLoaded)
		banner:addEventListener(Event.BANNER_AD_FAILED, onBannerAdFailed)
		banner:addEventListener(Event.BANNER_ACTION_BEGIN, onBannerActionBegin)
		banner:addEventListener(Event.BANNER_ACTION_FINISHED, onBannerActionFinished)
		banner:show()  -- show it because newly created banners are not visible by default
	end

	-- show the banner (if it exists)
	function showBanner()
		if banner ~= nil then
			banner:show()
		end
	end

	-- hide the banner (if it exists)
	function hideBanner()
		if banner ~= nil then
			banner:hide()
		end
	end
	
---------------------------------------

Function: iad.Banner:show

Shows the ad banner if an ad is currently available or when an ad becomes available.

---------------------------------------

Function: iad.Banner:hide

Hides the ad banner.

---------------------------------------

Function: iad.Banner:setAlignment

Sets the alignment of the banner as the top or bottom.

Parameters:
	alignment - (string) whether you want ads to show top or bottom of the screen. It can be either iad.Banner.TOP or iad.Banner.BOTTOM.


---------------------------------------

Function: iad.Banner:isBannerLoaded

Returns `true` if the ad banner has downloaded an advertisement, `false` otherwise.

Returns:
`true` if the ad banner has downloaded an advertisement, `false` otherwise
