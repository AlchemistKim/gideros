include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/Makefile.def

QT=$(QTBASEDIR)/$(QTVER)/$(QTMINGW)
QPATH=$(QT)/bin:$(QTBASEDIR)/Tools/$(QTMINGW)/bin:$(PATH)
JAR=$(JAVA_HOME)/bin/jar
ANT=export JAVA_HOME=$(JAVA_HOME); export ANDROID_HOME=$(ANDROID_HOME); $(JAVA_HOME)/bin/java -classpath "$(ANT_HOME)\\lib\\ant-launcher.jar" "-Dant.home=$(ANT_HOME)" org.apache.tools.ant.launch.Launcher

#DEFS
PLUGINS_WIN=bitop lsqlite3 luasocket lpeg lfs json microphone
PLUGINS_ANDROID=bitop lsqlite3 luasocket lpeg lfs json microphone flurry Facebook googlebilling
ROOT=.
SDK=$(ROOT)/Sdk
RELEASE=$(ROOT)/release

#TOOLS
QMAKE=qmake
MINGWMAKE=mingw32-make



all:
	PATH="$(QPATH)" make -f $(ROOT)/scripts/Makefile.gid all.q

clean:
	PATH="$(QPATH)" make -f $(ROOT)/scripts/Makefile.gid clean.q

clean.q:	qtapp.clean android.clean

all.q: qtapp.install android.install

buildqtapp: buildqtlibs buildplugins buildqt

qtapp.install: qtlibs.install plugins.install qt.install

qtapp.clean: qtlibs.clean plugins.clean qt.clean

buildqtlibs: $(addsuffix .qmake.rel,libpystring libgvfs) libgid.qmake5.rel $(addsuffix .qmake.rel,lua libgideros)
	rm -rf $(SDK)
	mkdir $(SDK)
	mkdir $(SDK)/include
	mkdir $(SDK)/include/AL
	mkdir $(SDK)/lib
	mkdir $(SDK)/lib/desktop	
	cp $(addprefix $(ROOT)/libgideros/,$(addsuffix .h,gideros gplugin gproxy greferenced gexport)) $(SDK)/include
	cp $(addprefix $(ROOT)/libgvfs/,$(addsuffix .h,gfile gpath)) $(SDK)/include
	cp $(addprefix $(ROOT)/libgid/include/,$(addsuffix .h,gglobal glog gapplication gevent)) $(SDK)/include
	cp $(addprefix $(ROOT)/lua/src/,$(addsuffix .h,lua luaconf lualib lauxlib)) $(SDK)/include
	cp $(ROOT)/libgid/external/openal-soft-1.13/include/AL/* $(SDK)/include/AL/
	cp $(ROOT)/libgideros/release/libgideros.a $(SDK)/lib/desktop
	cp $(ROOT)/lua/release/liblua.a $(SDK)/lib/desktop
	cp $(ROOT)/libgid/release/libgid.a $(SDK)/lib/desktop
	cp $(ROOT)/libgvfs/release/libgvfs.a $(SDK)/lib/desktop
	cp $(ROOT)/libgid/external/openal-soft-1.13/build/mingw48_32/libOpenAL32.dll.a $(SDK)/lib/desktop	

qtlibs.install: buildqtlibs
	mkdir -p $(RELEASE)
	cp $(ROOT)/libgid/release/gid.dll $(RELEASE)
	cp $(ROOT)/libgvfs/release/gvfs.dll $(RELEASE)
	cp $(ROOT)/lua/release/lua.dll $(RELEASE)
	cp $(ROOT)/libgideros/release/gideros.dll $(RELEASE)
	cp $(ROOT)/libpystring/release/pystring.dll $(RELEASE)

%.plugin:
	cd $(ROOT)/plugins/$*/source; if [ -d "Desktop" ]; then cd Desktop; fi; $(QMAKE) *.pro
	cd $(ROOT)/plugins/$*/source; if [ -d "Desktop" ]; then cd Desktop; fi; $(MINGWMAKE) release

%.plugin.clean:
	cd $(ROOT)/plugins/$*/source; $(MINGWMAKE) clean

%.plugin.install:
	mkdir -p $(RELEASE)/Plugins
	cd $(ROOT)/plugins/$*/source; if [ -d "Desktop" ]; then cd Desktop; fi; cp release/*.dll $(RELEASE)/Plugins	 

qtlibs.clean: $(addsuffix .qmake.clean,libpystring libgvfs libgid lua libgideros)

buildqt: $(addsuffix .qmake.rel,texturepacker fontcreator ui) player.qmake5.rel $(addsuffix .qmake.rel,gdrdeamon gdrbridge gdrexport)

qt.clean: $(addsuffix .qmake.clean,texturepacker fontcreator ui player gdrdeamon gdrbridge gdrexport)

qt.install: buildqt qt5.install
	cp $(ROOT)/ui/release/GiderosStudio.exe $(RELEASE)
	cp $(ROOT)/player/release/GiderosPlayer.exe $(RELEASE)
	cp $(ROOT)/texturepacker/release/GiderosTexturePacker.exe $(RELEASE)
	cp $(ROOT)/fontcreator/release/GiderosFontCreator.exe $(RELEASE)
	cp -R $(ROOT)/ui/Resources $(RELEASE)
	cp -R $(ROOT)/ui/Tools $(RELEASE)
	mkdir -p $(RELEASE)/Templates
	cp -R $(ROOT)/ui/Templates/Eclipse $(RELEASE)/Templates
	cp -R $(ROOT)/ui/Templates/Xcode4 $(RELEASE)/Templates
	mkdir -p $(RELEASE)/Templates/Eclipse/Android\ Template/assets
	mkdir -p $(RELEASE)/Templates/Eclipse/Android\ Template/gen
	mkdir -p $(RELEASE)/Templates/Eclipse/Android\ Template/res/layout
	mkdir -p $(RELEASE)/Templates/Xcode4/iOS\ Template/iOS\ Template/assets
	mkdir -p $(RELEASE)/Examples
	cp -R $(ROOT)/samplecode/* $(RELEASE)/Examples
	cp -R $(ROOT)/ios/GiderosiOSPlayer $(RELEASE)
	cp $(ROOT)/gdrdeamon/release/gdrdeamon.exe $(RELEASE)/Tools
	cp $(ROOT)/gdrbridge/release/gdrbridge.exe $(RELEASE)/Tools
	cp $(ROOT)/gdrexport/release/gdrexport.exe $(RELEASE)/Tools
	
QT5DLLS=icudt$(QT5ICUVER) icuin$(QT5ICUVER) icuuc$(QT5ICUVER) libgcc_s_dw2-1 libstdc++-6 libwinpthread-1 \
		Qt5Core Qt5Gui Qt5Network Qt5OpenGL Qt5PrintSupport Qt5Widgets Qt5Xml
QT5DLLTOOLS=icudt$(QT5ICUVER) icuin$(QT5ICUVER) icuuc$(QT5ICUVER) libgcc_s_dw2-1 libstdc++-6 libwinpthread-1 \
		Qt5Core Qt5Network Qt5Xml
QT5PLATFORM=qminimal qoffscreen qwindows

qt5.install:
	for f in $(QT5DLLS); do cp $(QT)/bin/$$f.dll $(RELEASE); done
	mkdir -p $(RELEASE)/imageformats
	cp $(QT)/plugins/imageformats/qjpeg.dll $(RELEASE)/imageformats
	mkdir -p $(RELEASE)/platforms
	for f in $(QT5PLATFORM); do cp $(QT)/plugins/platforms/$$f.dll $(RELEASE)/platforms; done
	cp $(QT)/lib/qscintilla2.dll $(RELEASE)
	cp $(ROOT)/libgid/external/glew-1.10.0/lib/mingw48_32/glew32.dll $(RELEASE)
	cp $(ROOT)/libgid/external/openal-soft-1.13/build/mingw48_32/OpenAL32.dll $(RELEASE)
	mkdir -p $(RELEASE)/Tools
	for f in $(QT5DLLTOOLS); do cp $(QT)/bin/$$f.dll $(RELEASE)/Tools; done
	
buildplugins: $(addsuffix .plugin,$(PLUGINS_WIN))

plugins.clean: $(addsuffix .plugin.clean,$(PLUGINS_WIN))

plugins.install: buildplugins $(addsuffix .plugin.install,$(PLUGINS_WIN))

%.qmake.clean:
	cd $(ROOT)/$*; $(MINGWMAKE) clean

%.qmake.rel:
	cd $(ROOT)/$*; $(QMAKE) $*.pro
	cd $(ROOT)/$*; $(MINGWMAKE) release

%.qmake5.rel:
	cd $(ROOT)/$*; $(QMAKE) $*_qt5.pro
	cd $(ROOT)/$*; $(MINGWMAKE) release

%.qmake5.dbg:
	cd $(ROOT)/$*; $(QMAKE) $*_qt5.pro
	cd $(ROOT)/$*; $(MINGWMAKE) debug

#ANDROID
android.clean: androidlib.clean androidso.clean
	cd $(ROOT)/android/GiderosAndroidPlayer; $(ANT) clean

android: androidlibs androidso androidplugins
	rm -rf $(ROOT)/android/GiderosAndroidPlayer/src/com/android
	rm -rf $(ROOT)/android/GiderosAndroidPlayer/src/com/giderosmobile/android/plugins
	cd $(ROOT)/android/GiderosAndroidPlayer; $(ANT) debug
	rm -f $(ROOT)/android/GiderosAndroidPlayer/bin/classes/com/giderosmobile/android/player/GiderosAndroidPlayerActivity.class
	rm -f $(ROOT)/android/GiderosAndroidPlayer/bin/classes/com/giderosmobile/android/player/GiderosGLSurfaceView.class
	rm -f $(ROOT)/android/GiderosAndroidPlayer/bin/classes/com/giderosmobile/android/player/GiderosRenderer.class
	rm -f $(ROOT)/android/GiderosAndroidPlayer/bin/classes/com/giderosmobile/android/player/R.class
	rm -f $(ROOT)/android/GiderosAndroidPlayer/bin/classes/com/giderosmobile/android/player/R$*.class
	cd $(ROOT)/android/GiderosAndroidPlayer/bin/classes; $(JAR) cvf gideros.jar com
	mv $(ROOT)/android/GiderosAndroidPlayer/bin/classes/gideros.jar $(ROOT)/android/GiderosAndroidPlayer/

android.install: android androidlibs.install androidso.install androidplugins.install
	cp $(ROOT)/android/GiderosAndroidPlayer/gideros.jar $(RELEASE)/Templates/Eclipse/Android\ Template
	rm -rf $(ROOT)/android/GiderosAndroidPlayer/libs
	cp -R $(RELEASE)/Templates/Eclipse/Android\ Template/libs $(ROOT)/android/GiderosAndroidPlayer
	cd $(ROOT)/android/GiderosAndroidPlayer; $(ANT) debug;
	mv $(ROOT)/android/GiderosAndroidPlayer/bin/GiderosAndroidPlayer-debug.apk $(RELEASE)/GiderosAndroidPlayer.apk

androidlibs: libgvfs.androidlib lua.androidlib

androidso: androidso.prep arm6_armeabi.androidso arm7_armeabi-v7a.androidso x86_x86.androidso
	rm -rf $(ROOT)/Sdk/lib/android
	mkdir -p $(ROOT)/Sdk/lib/android
	cp -R $(ROOT)/android/build/libs/* $(ROOT)/Sdk/lib/android 

androidplugins: $(addsuffix .androidplugin,$(PLUGINS_ANDROID))

androidso.prep:
	mkdir -p $(ROOT)/android/build/libs

androidso.clean:
	rm -rf $(ROOT)/android/build

%.androidso:
	cp -R  $(ROOT)/android/lib/jni/*.cpp $(ROOT)/android/$(firstword $(subst _, ,$*))/jni
	cp $(ROOT)/android/lib/jni/Android-Common.mk $(ROOT)/android/$(firstword $(subst _, ,$*))/jni/
	cp $(ROOT)/android/lib/jni/Android-$(firstword $(subst _, ,$*)).mk $(ROOT)/android/$(firstword $(subst _, ,$*))/jni/Android.mk
	cp $(ROOT)/android/lib/jni/Application-$(firstword $(subst _, ,$*)).mk $(ROOT)/android/$(firstword $(subst _, ,$*))/jni/Application.mk
	cd $(ROOT)/android/$(firstword $(subst _, ,$*));$(NDKBUILD)
	mkdir -p $(ROOT)/android/build/$(word 2,$(subst _, ,$*))
	cp -R $(ROOT)/android/$(firstword $(subst _, ,$*))/libs/$(word 2,$(subst _, ,$*)) $(ROOT)/android/build/libs/


%.androidlib:
	cd $(ROOT)/$*; $(NDKBUILD)

%.androidplugin:
	cd $(ROOT)/plugins/$*/source; if [ -d "Android" ]; then cd Android; fi;	$(NDKBUILD)

%.androidlib.clean:
	rm -rf $(ROOT)/$*/libs $(ROOT)/$*/obj

androidso.install: androidso
	mkdir -p $(RELEASE)/Templates/Eclipse/Android\ Template/jni
	cp $(ROOT)/android/lib/jni/Application.mk $(RELEASE)/Templates/Eclipse/Android\ Template/jni
	cp -R $(ROOT)/android/build/libs $(RELEASE)/Templates/Eclipse/Android\ Template/

androidplugins.install: androidplugins $(addsuffix .androidplugin.install,$(PLUGINS_ANDROID))

androidlibs.install: androidlibs

%.androidplugin.install:
	cd $(ROOT)/plugins/$*/source; if [ -d "Android" ]; then cd Android; fi;	\
	cp -R libs $(CURDIR)/$(RELEASE)/Templates/Eclipse/Android\ Template/; \
	if [ -d "com" ]; then \
	cp -R com $(CURDIR)/$(RELEASE)/Templates/Eclipse/Android\ Template/src;\
	cp -R com $(CURDIR)/$(ROOT)/android/GiderosAndroidPlayer/src;\
	fi

WINRT_SHADERS=Basic Color Texture TextureColor	
winrt.shaders:
	for s in $(WINRT_SHADERS); do $(FXC) //T vs_4_0_level_9_3 //E VShader //Fo winrt/v$$s.cso winrt/$$s.hlsl; done
	for s in $(WINRT_SHADERS); do $(FXC) //T ps_4_0_level_9_3 //E PShader //Fo winrt/p$$s.cso winrt/$$s.hlsl; done
	cp winrt/*.cso winrt_example/giderosgame/giderosgame.Windows/Assets
	cp winrt/*.cso winrt_example/giderosgame/giderosgame.WindowsPhone/Assets
	cp winrt/*.cso "ui/Templates/VisualStudio/WinRT Template/giderosgame/giderosgame.Windows/Assets"
	cp winrt/*.cso "ui/Templates/VisualStudio/WinRT Template/giderosgame/giderosgame.WindowsPhone/Assets"
	
		